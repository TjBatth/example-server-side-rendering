{:rename-macros {}, :renames {}, :externs {Error {}, RegExp {}, parseFloat {}, parseInt {}, NaN {}}, :use-macros {map-invert clojure.set, stringify-keys clojure.walk}, :excludes #{contains? reverse empty? replace keyword chars regexp? repeat}, :name cuerdas.core, :imports nil, :requires {goog.string goog.string, rx cuerdas.regexp, clojure.set clojure.set, str clojure.string, clojure.string clojure.string, cljs.reader cljs.reader, clojure.walk clojure.walk, gstr goog.string, edn cljs.reader, cuerdas.regexp cuerdas.regexp}, :uses {map-invert clojure.set, stringify-keys clojure.walk}, :defs {lstrip {:name cuerdas.core/lstrip, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 278, :column 1, :end-line 278, :end-column 12, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 278, :column 6, :end-line 278, :end-column 12}}, alnum? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 208, :column 7, :end-line 208, :end-column 13, :arglists (quote ([s])), :doc "Checks if a string contains only alphanumeric characters."}, :name cuerdas.core/alnum?, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Checks if a string contains only alphanumeric characters."}, titleize {:name cuerdas.core/titleize, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 884, :column 1, :end-line 884, :end-column 27, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 884, :column 19, :end-line 884, :end-column 27, :deprecated true}}, ends-with? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 99, :column 7, :end-line 99, :end-column 17, :arglists (quote ([s suffix])), :doc "Check if the string ends with suffix."}, :name cuerdas.core/ends-with?, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 17, :method-params ([s suffix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s suffix])), :doc "Check if the string ends with suffix."}, contains? {:name cuerdas.core/contains?, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 889, :column 1, :end-line 889, :end-column 28, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 889, :column 19, :end-line 889, :end-column 28, :deprecated true}}, collapse-whitespace {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 687, :column 7, :end-line 687, :end-column 26, :arglists (quote ([s])), :doc "Converts all adjacent whitespace characters\n  to a single space."}, :name cuerdas.core/collapse-whitespace, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 26, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 687, :end-line 687, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts all adjacent whitespace characters\n  to a single space."}, js-selector {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 584, :column 7, :end-line 584, :end-column 18, :arglists (quote ([s])), :doc "Output will be either:\n     (js-selector \"-pascal-case-me\") ;; => PascalCaseMe\n     (js-selector \"camel-case-me\") ;; => camelCaseMe\n\n  accepts keywords and strings, with any standard delimiter"}, :name cuerdas.core/js-selector, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 584, :end-line 584, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Output will be either:\n     (js-selector \"-pascal-case-me\") ;; => PascalCaseMe\n     (js-selector \"camel-case-me\") ;; => camelCaseMe\n\n  accepts keywords and strings, with any standard delimiter"}, <<- {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 759, :column 7, :end-line 759, :end-column 10, :arglists (quote ([s] [r s])), :doc "Unindent multiline text.\n  Uses either a supplied regex or the shortest\n  beginning-of-line to non-whitespace distance", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [r s]), :arglists ([s] [r s]), :arglists-meta (nil nil)}}, :name cuerdas.core/<<-, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [r s]), :arglists ([s] [r s]), :arglists-meta (nil nil)}, :method-params ([s] [r s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 759, :end-line 759, :max-fixed-arity 2, :fn-var true, :arglists ([s] [r s]), :doc "Unindent multiline text.\n  Uses either a supplied regex or the shortest\n  beginning-of-line to non-whitespace distance"}, capitalize {:name cuerdas.core/capitalize, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 885, :column 1, :end-line 885, :end-column 29, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 885, :column 19, :end-line 885, :end-column 29, :deprecated true}}, reverse {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 398, :column 7, :end-line 398, :end-column 14, :arglists (quote ([s])), :doc "Return string reversed."}, :name cuerdas.core/reverse, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 398, :end-line 398, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return string reversed."}, join {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 472, :column 7, :end-line 472, :end-column 11, :arglists (quote ([coll] [separator coll])), :doc "Joins strings together with given separator.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [separator coll]), :arglists ([coll] [separator coll]), :arglists-meta (nil nil)}}, :name cuerdas.core/join, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [separator coll]), :arglists ([coll] [separator coll]), :arglists-meta (nil nil)}, :method-params ([coll] [separator coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 472, :end-line 472, :max-fixed-arity 2, :fn-var true, :arglists ([coll] [separator coll]), :doc "Joins strings together with given separator."}, numeric? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 228, :column 7, :end-line 228, :end-column 15, :arglists (quote ([s])), :doc "Check if a string contains only numeric values."}, :name cuerdas.core/numeric?, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Check if a string contains only numeric values."}, replace-first {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 348, :column 7, :end-line 348, :end-column 20, :arglists (quote ([s match replacement])), :doc "Replaces first instance of match with replacement in s."}, :name cuerdas.core/replace-first, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 20, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement])), :doc "Replaces first instance of match with replacement in s."}, clean {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 269, :column 7, :end-line 269, :end-column 12, :arglists (quote ([s])), :doc "Trim and replace multiple spaces with\n  a single space."}, :name cuerdas.core/clean, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Trim and replace multiple spaces with\n  a single space."}, rtrim {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 247, :column 7, :end-line 247, :end-column 12, :arglists (quote ([s] [s chs])), :doc "Removes whitespace or specified characters\n  from right side of string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}}, :name cuerdas.core/rtrim, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}, :method-params ([s] [s chs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s chs]), :doc "Removes whitespace or specified characters\n  from right side of string."}, startswith? {:name cuerdas.core/startswith?, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 890, :column 1, :end-line 890, :end-column 30, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 890, :column 19, :end-line 890, :end-column 30, :deprecated true}}, caseless= {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 164, :column 7, :end-line 164, :end-column 16, :arglists (quote ([s1 s2])), :doc "Compare strings in a case-insensitive manner.\n\n  This function is locale independent."}, :name cuerdas.core/caseless=, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 16, :method-params ([s1 s2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s1 s2])), :doc "Compare strings in a case-insensitive manner.\n\n  This function is locale independent."}, letters? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 221, :column 7, :end-line 221, :end-column 15, :arglists (quote ([s])), :doc "Checks if string contains only letters.\n  This function will use all the unicode range."}, :name cuerdas.core/letters?, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Checks if string contains only letters.\n  This function will use all the unicode range."}, starts-with? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 87, :column 7, :end-line 87, :end-column 19, :arglists (quote ([s prefix])), :doc "Check if the string starts with prefix."}, :name cuerdas.core/starts-with?, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 19, :method-params ([s prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s prefix])), :doc "Check if the string starts with prefix."}, replace-all {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 305, :column 11, :end-line 305, :end-column 22, :private true, :arglists (quote ([s re replacement]))}, :private true, :name cuerdas.core/replace-all, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 22, :method-params ([s re replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 305, :end-line 305, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s re replacement]))}, rstrip {:name cuerdas.core/rstrip, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 277, :column 1, :end-line 277, :end-column 12, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 277, :column 6, :end-line 277, :end-column 12}}, upper {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 123, :column 7, :end-line 123, :end-column 12, :arglists (quote ([s])), :doc "Converts string to all upper-case.\n\n  This function works in strictly locale independent way,\n  if you want a localized version, just use `locale-upper`"}, :name cuerdas.core/upper, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts string to all upper-case.\n\n  This function works in strictly locale independent way,\n  if you want a localized version, just use `locale-upper`"}, slug {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 608, :column 7, :end-line 608, :end-column 11, :arglists (quote ([s])), :doc "Transform text into a URL slug."}, :name cuerdas.core/slug, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 608, :end-line 608, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Transform text into a URL slug."}, classify {:name cuerdas.core/classify, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 882, :column 1, :end-line 882, :end-column 27, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 882, :column 19, :end-line 882, :end-column 27, :deprecated true}}, format {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 460, :column 7, :end-line 460, :end-column 13, :arglists (quote ([s & more])), :doc "Simple string interpolation.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s more)], :arglists ([s & more]), :arglists-meta (nil)}}, :name cuerdas.core/format, :variadic true, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s more)], :arglists ([s & more]), :arglists-meta (nil)}, :method-params [(s more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 460, :end-line 460, :max-fixed-arity 1, :fn-var true, :arglists ([s & more]), :doc "Simple string interpolation."}, kebab {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 578, :column 7, :end-line 578, :end-column 12, :arglists (quote ([s])), :doc "Output will be: lower-cased-and-separated-with-dashes\n  accepts strings and keywords"}, :name cuerdas.core/kebab, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 578, :end-line 578, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Output will be: lower-cased-and-separated-with-dashes\n  accepts strings and keywords"}, word? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 214, :column 7, :end-line 214, :end-column 12, :arglists (quote ([s])), :doc "Checks if a string contains only the word characters.\n  This function will use all the unicode range."}, :name cuerdas.core/word?, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Checks if a string contains only the word characters.\n  This function will use all the unicode range."}, ltrim {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 258, :column 7, :end-line 258, :end-column 12, :arglists (quote ([s] [s chs])), :doc "Removes whitespace or specified characters\n  from left side of string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}}, :name cuerdas.core/ltrim, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}, :method-params ([s] [s chs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s chs]), :doc "Removes whitespace or specified characters\n  from left side of string."}, fmt {:name cuerdas.core/fmt, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 468, :column 1, :end-line 468, :end-column 9, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 468, :column 6, :end-line 468, :end-column 9}, :doc "A shorter alias to `format` function."}, pascal {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 572, :column 7, :end-line 572, :end-column 13, :arglists (quote ([s])), :doc "Output will be: CapitalizedAndTouchingTheNext\n  accepts strings and keywords"}, :name cuerdas.core/pascal, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 572, :end-line 572, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Output will be: CapitalizedAndTouchingTheNext\n  accepts strings and keywords"}, includes? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 53, :column 7, :end-line 53, :end-column 16, :arglists (quote ([s subs])), :doc "Determines whether a string contains a substring."}, :name cuerdas.core/includes?, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 16, :method-params ([s subs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s subs])), :doc "Determines whether a string contains a substring."}, locale-lower {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 132, :column 7, :end-line 132, :end-column 19, :arglists (quote ([s])), :doc "Converts string to all lower-case respecting\n  the current system locale.\n\n  In the jvm you can provide a concrete locale to\n  use as the second optional argument."}, :name cuerdas.core/locale-lower, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts string to all lower-case respecting\n  the current system locale.\n\n  In the jvm you can provide a concrete locale to\n  use as the second optional argument."}, empty? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 41, :column 7, :end-line 41, :end-column 13, :arglists (quote ([s])), :doc "Checks if a string is empty."}, :name cuerdas.core/empty?, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Checks if a string is empty."}, alpha? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 196, :column 7, :end-line 196, :end-column 13, :arglists (quote ([s])), :doc "Checks if a string contains only alpha characters."}, :name cuerdas.core/alpha?, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Checks if a string contains only alpha characters."}, uslug {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 616, :column 7, :end-line 616, :end-column 12, :arglists (quote ([s])), :doc "Unicode friendly version of `slug` function."}, :name cuerdas.core/uslug, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 616, :end-line 616, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Unicode friendly version of `slug` function."}, locale-caseless= {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 173, :column 7, :end-line 173, :end-column 23, :arglists (quote ([s1 s2])), :doc "Compare strings in a case-insensitive manner\n  respecting the current locale.\n\n  An optional locale can be passed as third\n  argument (only on JVM)."}, :name cuerdas.core/locale-caseless=, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 23, :method-params ([s1 s2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s1 s2])), :doc "Compare strings in a case-insensitive manner\n  respecting the current locale.\n\n  An optional locale can be passed as third\n  argument (only on JVM)."}, replace {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 326, :column 7, :end-line 326, :end-column 14, :arglists (quote ([s match replacement])), :doc "Replaces all instance of match with replacement in s.\n\n  The replacement is literal (i.e. none of its characters are treated\n  specially) for all cases above except pattern / string.\n\n  In match is pattern instance, replacement can contain $1, $2, etc.\n  will be substituted with string that matcher the corresponding\n  parenthesized group in pattern.\n\n  If you wish your replacement string to be used literary,\n  use `(cuerdas.regexp/escape replacement)`.\n\n  Example:\n    (replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n    ;; => \"lmostAay igPay atinLay\"\n  "}, :name cuerdas.core/replace, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 14, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 326, :end-line 326, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement])), :doc "Replaces all instance of match with replacement in s.\n\n  The replacement is literal (i.e. none of its characters are treated\n  specially) for all cases above except pattern / string.\n\n  In match is pattern instance, replacement can contain $1, $2, etc.\n  will be substituted with string that matcher the corresponding\n  parenthesized group in pattern.\n\n  If you wish your replacement string to be used literary,\n  use `(cuerdas.regexp/escape replacement)`.\n\n  Example:\n    (replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n    ;; => \"lmostAay igPay atinLay\"\n  "}, empty-or-nil? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 47, :column 7, :end-line 47, :end-column 20, :arglists (quote ([s])), :doc "Convenient helper for check emptines or if value is nil."}, :name cuerdas.core/empty-or-nil?, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Convenient helper for check emptines or if value is nil."}, snake {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 548, :column 7, :end-line 548, :end-column 12, :arglists (quote ([s])), :doc "Output will be: lower_cased_and_underscore_separated\n  accepts strings and keywords"}, :name cuerdas.core/snake, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 548, :end-line 548, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Output will be: lower_cased_and_underscore_separated\n  accepts strings and keywords"}, slugify {:name cuerdas.core/slugify, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 878, :column 1, :end-line 878, :end-column 26, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 878, :column 19, :end-line 878, :end-column 26, :deprecated true}}, humanize {:name cuerdas.core/humanize, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 883, :column 1, :end-line 883, :end-column 27, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 883, :column 19, :end-line 883, :end-column 27, :deprecated true}}, underscored {:name cuerdas.core/underscored, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 881, :column 1, :end-line 881, :end-column 30, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 881, :column 19, :end-line 881, :end-column 30, :deprecated true}}, dasherize {:name cuerdas.core/dasherize, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 879, :column 1, :end-line 879, :end-column 28, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 879, :column 19, :end-line 879, :end-column 28, :deprecated true}}, unquote {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 502, :column 7, :end-line 502, :end-column 14, :arglists (quote ([s] [s qchar])), :doc "Unquote a string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s qchar]), :arglists ([s] [s qchar]), :arglists-meta (nil nil)}}, :name cuerdas.core/unquote, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s qchar]), :arglists ([s] [s qchar]), :arglists-meta (nil nil)}, :method-params ([s] [s qchar]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 502, :end-line 502, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s qchar]), :doc "Unquote a string."}, parse-float {:name cuerdas.core/parse-float, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 888, :column 1, :end-line 888, :end-column 30, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 888, :column 19, :end-line 888, :end-column 30, :deprecated true}}, capital {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 536, :column 7, :end-line 536, :end-column 14, :arglists (quote ([s])), :doc "Uppercases the first character of a string or keyword"}, :name cuerdas.core/capital, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 536, :end-line 536, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Uppercases the first character of a string or keyword"}, words {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 422, :column 7, :end-line 422, :end-column 12, :arglists (quote ([s] [s re])), :doc "Returns a vector of the words in the string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s re]), :arglists ([s] [s re]), :arglists-meta (nil nil)}}, :name cuerdas.core/words, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s re]), :arglists ([s] [s re]), :arglists-meta (nil nil)}, :method-params ([s] [s re]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 422, :end-line 422, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s re]), :doc "Returns a vector of the words in the string."}, parse-double {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 642, :column 7, :end-line 642, :end-column 19, :arglists (quote ([s])), :doc "Return the double value from string."}, :name cuerdas.core/parse-double, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 642, :end-line 642, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return the double value from string."}, digits? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 202, :column 7, :end-line 202, :end-column 14, :arglists (quote ([s])), :doc "Checks if a string contains only digit characters."}, :name cuerdas.core/digits?, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Checks if a string contains only digit characters."}, +slug-tr-map+ {:name cuerdas.core/+slug-tr-map+, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 604, :column 1, :end-line 604, :end-column 29, :private true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 604, :column 16, :end-line 604, :end-column 29, :private true}, :tag any}, unlines {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 416, :column 7, :end-line 416, :end-column 14, :arglists (quote ([s])), :doc "Returns a new string joining a list of strings with a newline char (\\n)."}, :name cuerdas.core/unlines, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 416, :end-line 416, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns a new string joining a list of strings with a newline char (\\n)."}, human {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 560, :column 7, :end-line 560, :end-column 12, :arglists (quote ([s])), :doc "Output will be: lower cased and space separated\n  accepts strings and keywords"}, :name cuerdas.core/human, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 560, :end-line 560, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Output will be: lower cased and space separated\n  accepts strings and keywords"}, substr-between {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 743, :column 7, :end-line 743, :end-column 21, :arglists (quote ([s prefix suffix])), :doc "Find string that is nested in between two strings. Return first match"}, :name cuerdas.core/substr-between, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 21, :method-params ([s prefix suffix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 743, :end-line 743, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s prefix suffix])), :doc "Find string that is nested in between two strings. Return first match"}, replace* {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 315, :column 11, :end-line 315, :end-column 19, :private true, :arglists (quote ([s match replacement]))}, :private true, :name cuerdas.core/replace*, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 19, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 315, :end-line 315, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement]))}, lines {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 411, :column 7, :end-line 411, :end-column 12, :arglists (quote ([s])), :doc "Return a list of the lines in the string."}, :name cuerdas.core/lines, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 411, :end-line 411, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return a list of the lines in the string."}, keyword* {:name cuerdas.core/keyword*, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 38, :column 10, :end-line 38, :end-column 33, :private true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 38, :column 25, :end-line 38, :end-column 33, :private true}}, to-bool {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 665, :column 7, :end-line 665, :end-column 14, :arglists (quote ([s])), :doc "Returns true for 1/on/true/yes string values (case-insensitive),\n  false otherwise."}, :name cuerdas.core/to-bool, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 665, :end-line 665, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns true for 1/on/true/yes string values (case-insensitive),\n  false otherwise."}, strip-tags-impl {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 715, :column 8, :end-line 715, :end-column 23, :private true, :arglists (quote ([s tags mappings]))}, :private true, :name cuerdas.core/strip-tags-impl, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 23, :method-params ([s tags mappings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 715, :end-line 715, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s tags mappings]))}, strip-suffix {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 287, :column 7, :end-line 287, :end-column 19, :arglists (quote ([s prefix])), :doc "Strip suffix in more efficient way."}, :name cuerdas.core/strip-suffix, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 19, :method-params ([s prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s prefix])), :doc "Strip suffix in more efficient way."}, indexed-format {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 443, :column 11, :end-line 443, :end-column 25, :private true, :arglists (quote ([s params]))}, :private true, :name cuerdas.core/indexed-format, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 25, :method-params ([s params]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 443, :end-line 443, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s params]))}, strip-prefix {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 280, :column 7, :end-line 280, :end-column 19, :arglists (quote ([s prefix])), :doc "Strip prefix in more efficient way."}, :name cuerdas.core/strip-prefix, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 19, :method-params ([s prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s prefix])), :doc "Strip prefix in more efficient way."}, title {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 566, :column 7, :end-line 566, :end-column 12, :arglists (quote ([s])), :doc "Output will be: Each Word Capitalized And Separated With Spaces\n  accepts strings and keywords"}, :name cuerdas.core/title, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 566, :end-line 566, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Output will be: Each Word Capitalized And Separated With Spaces\n  accepts strings and keywords"}, unsurround {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 485, :column 7, :end-line 485, :end-column 17, :arglists (quote ([s surrounding])), :doc "Unsurround a string surrounded by another."}, :name cuerdas.core/unsurround, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 17, :method-params ([s surrounding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 485, :end-line 485, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s surrounding])), :doc "Unsurround a string surrounded by another."}, interpolate-format {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 430, :column 8, :end-line 430, :end-column 26, :private true, :arglists (quote ([s params]))}, :private true, :name cuerdas.core/interpolate-format, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 26, :method-params ([s params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 430, :end-line 430, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s params]))}, strip-newlines {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 374, :column 7, :end-line 374, :end-column 21, :arglists (quote ([s])), :doc "Takes a string and replaces newlines with a space.\n  Multiple lines are replaced with a single space."}, :name cuerdas.core/strip-newlines, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 374, :end-line 374, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Takes a string and replaces newlines with a space.\n  Multiple lines are replaced with a single space."}, surround {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 479, :column 7, :end-line 479, :end-column 15, :arglists (quote ([s wrap])), :doc "Surround a string with another string."}, :name cuerdas.core/surround, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 15, :method-params ([s wrap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 479, :end-line 479, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s wrap])), :doc "Surround a string with another string."}, alpha-numeric? {:name cuerdas.core/alpha-numeric?, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 886, :column 1, :end-line 886, :end-column 33, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 886, :column 19, :end-line 886, :end-column 33, :deprecated true}}, css-selector {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 594, :column 7, :end-line 594, :end-column 19, :arglists (quote ([s])), :doc "Output will be either:\n     (js-selector \"LeadingDash\") ;; => -leading-dash\n     (js-selector \"noLeadingDash\") ;; => no-leading-dash\n\n  accepts keywords and strings, with any standard delimiter"}, :name cuerdas.core/css-selector, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 594, :end-line 594, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Output will be either:\n     (js-selector \"LeadingDash\") ;; => -leading-dash\n     (js-selector \"noLeadingDash\") ;; => no-leading-dash\n\n  accepts keywords and strings, with any standard delimiter"}, one-of? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 660, :column 7, :end-line 660, :end-column 14, :arglists (quote ([coll s])), :doc "Returns true if s can be found in coll."}, :name cuerdas.core/one-of?, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 14, :method-params ([coll s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 660, :end-line 660, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll s])), :doc "Returns true if s can be found in coll."}, strip-tags {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 733, :column 7, :end-line 733, :end-column 17, :arglists (quote ([s] [s tags] [s tags mapping])), :doc "Remove html tags from string.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [s tags] [s tags mapping]), :arglists ([s] [s tags] [s tags mapping]), :arglists-meta (nil nil nil)}}, :name cuerdas.core/strip-tags, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [s tags] [s tags mapping]), :arglists ([s] [s tags] [s tags mapping]), :arglists-meta (nil nil nil)}, :method-params ([s] [s tags] [s tags mapping]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 733, :end-line 733, :max-fixed-arity 3, :fn-var true, :arglists ([s] [s tags] [s tags mapping]), :doc "Remove html tags from string."}, split {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 380, :column 7, :end-line 380, :end-column 12, :arglists (quote ([s] [s sep] [s sep num])), :doc "Splits a string on a separator a limited\n  number of times. The separator can be a string\n  or Pattern (clj) / RegExp (cljs) instance.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [s sep] [s sep num]), :arglists ([s] [s sep] [s sep num]), :arglists-meta (nil nil nil)}}, :name cuerdas.core/split, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [s sep] [s sep num]), :arglists ([s] [s sep] [s sep num]), :arglists-meta (nil nil nil)}, :method-params ([s] [s sep] [s sep num]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 380, :end-line 380, :max-fixed-arity 3, :fn-var true, :arglists ([s] [s sep] [s sep num]), :doc "Splits a string on a separator a limited\n  number of times. The separator can be a string\n  or Pattern (clj) / RegExp (cljs) instance."}, locale-upper {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 148, :column 7, :end-line 148, :end-column 19, :arglists (quote ([s])), :doc "Converts string to all upper-case respecting\n  the current system locale.\n\n  In the jvm you can provide a concrete locale to\n  use as the second optional argument."}, :name cuerdas.core/locale-upper, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts string to all upper-case respecting\n  the current system locale.\n\n  In the jvm you can provide a concrete locale to\n  use as the second optional argument."}, quote {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 497, :column 7, :end-line 497, :end-column 12, :arglists (quote ([s] [s qchar])), :doc "Quotes a string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s qchar]), :arglists ([s] [s qchar]), :arglists-meta (nil nil)}}, :name cuerdas.core/quote, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s qchar]), :arglists ([s] [s qchar]), :arglists-meta (nil nil)}, :method-params ([s] [s qchar]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 497, :end-line 497, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s qchar]), :doc "Quotes a string."}, keyword {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 623, :column 7, :end-line 623, :end-column 14, :arglists (quote ([k] [n k])), :doc "Safer version of clojure keyword, accepting a\n  symbol for the namespace and kebab-casing the key", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([k] [n k]), :arglists ([k] [n k]), :arglists-meta (nil nil)}}, :name cuerdas.core/keyword, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([k] [n k]), :arglists ([k] [n k]), :arglists-meta (nil nil)}, :method-params ([k] [n k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 623, :end-line 623, :max-fixed-arity 2, :fn-var true, :arglists ([k] [n k]), :doc "Safer version of clojure keyword, accepting a\n  symbol for the namespace and kebab-casing the key"}, phrase {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 554, :column 7, :end-line 554, :end-column 13, :arglists (quote ([s])), :doc "Output will be: Space separated with the first letter capitalized.\n  accepts strings and keywords"}, :name cuerdas.core/phrase, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 554, :end-line 554, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Output will be: Space separated with the first letter capitalized.\n  accepts strings and keywords"}, chars {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 404, :column 7, :end-line 404, :end-column 12, :arglists (quote ([s])), :doc "Split a string in a seq of chars."}, :name cuerdas.core/chars, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 404, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Split a string in a seq of chars."}, pad {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 671, :column 7, :end-line 671, :end-column 10, :arglists (quote ([s & [{:keys [length padding type], :or {length 0, padding " ", type :left}}]])), :doc "Pads the str with characters until the total string\n  length is equal to the passed length parameter. By\n  default, pads on the left with the space char.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [{:keys [length padding type], :or {length 0, padding " ", type :left}}])], :arglists ([s & [{:keys [length padding type], :or {length 0, padding " ", type :left}}]]), :arglists-meta (nil)}}, :name cuerdas.core/pad, :variadic true, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [{:keys [length padding type], :or {length 0, padding " ", type :left}}])], :arglists ([s & [{:keys [length padding type], :or {length 0, padding " ", type :left}}]]), :arglists-meta (nil)}, :method-params [(s [{:keys [length padding type], :or {length 0, padding " ", type :left}}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 671, :end-line 671, :max-fixed-arity 1, :fn-var true, :arglists ([s & [{:keys [length padding type], :or {length 0, padding " ", type :left}}]]), :doc "Pads the str with characters until the total string\n  length is equal to the passed length parameter. By\n  default, pads on the left with the space char."}, stylize-split {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 509, :column 8, :end-line 509, :end-column 21, :private true, :arglists (quote ([s]))}, :private true, :name cuerdas.core/stylize-split, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 509, :end-line 509, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, unescape-html {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 705, :column 7, :end-line 705, :end-column 20, :arglists (quote ([s])), :doc "Converts entity characters to HTML equivalents."}, :name cuerdas.core/unescape-html, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 705, :end-line 705, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts entity characters to HTML equivalents."}, parse-int {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 650, :column 7, :end-line 650, :end-column 16, :arglists (quote ([s])), :doc "Return the number value in integer form."}, :name cuerdas.core/parse-int, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 650, :end-line 650, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return the number value in integer form."}, slice {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 78, :column 10, :end-line 78, :end-column 15, :arglists (quote ([s begin] [s begin end])), :doc "Extracts a section of a string and returns a new string.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s begin] [s begin end]), :arglists ([s begin] [s begin end]), :arglists-meta (nil nil)}}, :name cuerdas.core/slice, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s begin] [s begin end]), :arglists ([s begin] [s begin end]), :arglists-meta (nil nil)}, :method-params ([s begin] [s begin end]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 78, :end-line 78, :max-fixed-arity 3, :fn-var true, :arglists ([s begin] [s begin end]), :doc "Extracts a section of a string and returns a new string."}, escape-html {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 695, :column 7, :end-line 695, :end-column 18, :arglists (quote ([s]))}, :name cuerdas.core/escape-html, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 695, :end-line 695, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, prune {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 354, :column 7, :end-line 354, :end-column 12, :arglists (quote ([s num] [s num subs])), :doc "Truncates a string to a certain length and adds '...'\n  if necessary.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s num] [s num subs]), :arglists ([s num] [s num subs]), :arglists-meta (nil nil)}}, :name cuerdas.core/prune, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s num] [s num subs]), :arglists ([s num] [s num subs]), :arglists-meta (nil nil)}, :method-params ([s num] [s num subs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 354, :end-line 354, :max-fixed-arity 3, :fn-var true, :arglists ([s num] [s num subs]), :doc "Truncates a string to a certain length and adds '...'\n  if necessary."}, lower {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 114, :column 7, :end-line 114, :end-column 12, :arglists (quote ([s])), :doc "Converts string to all lower-case.\n\n  This function works in strictly locale independent way,\n  if you want a localized version, just use `locale-lower`"}, :name cuerdas.core/lower, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts string to all lower-case.\n\n  This function works in strictly locale independent way,\n  if you want a localized version, just use `locale-lower`"}, endswith? {:name cuerdas.core/endswith?, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 891, :column 1, :end-line 891, :end-column 28, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 891, :column 19, :end-line 891, :end-column 28, :deprecated true}}, stylize-join {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 519, :column 8, :end-line 519, :end-column 20, :private true, :arglists (quote ([coll every-fn join-with] [[fst & rst] first-fn rest-fn join-with])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([coll every-fn join-with] [[fst & rst] first-fn rest-fn join-with]), :arglists ([coll every-fn join-with] [[fst & rst] first-fn rest-fn join-with]), :arglists-meta (nil nil)}}, :private true, :name cuerdas.core/stylize-join, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([coll every-fn join-with] [[fst & rst] first-fn rest-fn join-with]), :arglists ([coll every-fn join-with] [[fst & rst] first-fn rest-fn join-with]), :arglists-meta (nil nil)}, :method-params ([coll every-fn join-with] [[fst & rst] first-fn rest-fn join-with]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 519, :end-line 519, :max-fixed-arity 4, :fn-var true, :arglists ([coll every-fn join-with] [[fst & rst] first-fn rest-fn join-with])}, stylize {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 527, :column 7, :end-line 527, :end-column 14, :arglists (quote ([s every-fn join-with] [s first-fn rest-fn join-with])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([s every-fn join-with] [s first-fn rest-fn join-with]), :arglists ([s every-fn join-with] [s first-fn rest-fn join-with]), :arglists-meta (nil nil)}}, :name cuerdas.core/stylize, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([s every-fn join-with] [s first-fn rest-fn join-with]), :arglists ([s every-fn join-with] [s first-fn rest-fn join-with]), :arglists-meta (nil nil)}, :method-params ([s every-fn join-with] [s first-fn rest-fn join-with]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 527, :end-line 527, :max-fixed-arity 4, :fn-var true, :arglists ([s every-fn join-with] [s first-fn rest-fn join-with])}, underscore {:name cuerdas.core/underscore, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 880, :column 1, :end-line 880, :end-column 29, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 880, :column 19, :end-line 880, :end-column 29, :deprecated true}}, trim {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 236, :column 7, :end-line 236, :end-column 11, :arglists (quote ([s] [s chs])), :doc "Removes whitespace or specified characters\n  from both ends of string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}}, :name cuerdas.core/trim, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}, :method-params ([s] [s chs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s chs]), :doc "Removes whitespace or specified characters\n  from both ends of string."}, repeat {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 296, :column 7, :end-line 296, :end-column 13, :arglists (quote ([s] [s n])), :doc "Repeats string n times.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s n]), :arglists ([s] [s n]), :arglists-meta (nil nil)}}, :name cuerdas.core/repeat, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s n]), :arglists ([s] [s n]), :arglists-meta (nil nil)}, :method-params ([s] [s n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 296, :end-line 296, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s n]), :doc "Repeats string n times."}, parse-long {:name cuerdas.core/parse-long, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 887, :column 1, :end-line 887, :end-column 29, :deprecated true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 887, :column 19, :end-line 887, :end-column 29, :deprecated true}}, strip {:name cuerdas.core/strip, :file "public/js/compiled/dev/cuerdas/core.cljc", :line 276, :column 1, :end-line 276, :end-column 11, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 276, :column 6, :end-line 276, :end-column 11}}, blank? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 188, :column 7, :end-line 188, :end-column 13, :arglists (quote ([s])), :doc "Checks if a string is empty or contains only whitespace."}, :name cuerdas.core/blank?, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Checks if a string is empty or contains only whitespace."}, camel {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 542, :column 7, :end-line 542, :end-column 12, :arglists (quote ([s])), :doc "Output will be: lowerUpperUpperNoSpaces\n  accepts strings and keywords"}, :name cuerdas.core/camel, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 542, :end-line 542, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Output will be: lowerUpperUpperNoSpaces\n  accepts strings and keywords"}, parse-number {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/cuerdas/core.cljc", :line 631, :column 7, :end-line 631, :end-column 19, :arglists (quote ([s])), :doc "General purpose function for parse number like\n  string to number. It works with both integers\n  and floats."}, :name cuerdas.core/parse-number, :variadic false, :file "public/js/compiled/dev/cuerdas/core.cljc", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 631, :end-line 631, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "General purpose function for parse number like\n  string to number. It works with both integers\n  and floats."}}, :require-macros {edn cljs.reader, cljs.reader cljs.reader}, :cljs.analyzer/constants {:seen #{:sep :else :type :padding :length :right :both :left}, :order [:else :sep :length :padding :type :left :right :both]}, :doc nil}