{:rename-macros {}, :renames {}, :externs {JSON {stringify {}}, Buffer {prototype {macchiato$http$IHTTPResponseWriter$ {}, macchiato$http$IHTTPResponseWriter$-write-response$arity$3 {}}}, Error {}}, :use-macros {}, :excludes #{}, :name macchiato.http, :imports nil, :requires {s cuerdas.core, cuerdas.core cuerdas.core, cookies macchiato.cookies, macchiato.cookies macchiato.cookies, session macchiato.middleware.session, macchiato.middleware.session macchiato.middleware.session, node cljs.nodejs, cljs.nodejs cljs.nodejs}, :uses nil, :defs {Stream {:name macchiato.http/Stream, :file "public/js/compiled/dev/macchiato/http.cljs", :line 8, :column 1, :end-line 8, :end-column 21, :no-doc true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/http.cljs", :line 8, :column 15, :end-line 8, :end-column 21, :no-doc true}, :tag any}, url-parser {:name macchiato.http/url-parser, :file "public/js/compiled/dev/macchiato/http.cljs", :line 10, :column 1, :end-line 10, :end-column 25, :no-doc true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/http.cljs", :line 10, :column 15, :end-line 10, :end-column 25, :no-doc true}, :tag any}, req->map {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/http.cljs", :line 12, :column 8, :end-line 12, :end-column 16, :private true, :arglists (quote ([req res {:keys [scheme], :as opts}]))}, :private true, :name macchiato.http/req->map, :variadic false, :file "public/js/compiled/dev/macchiato/http.cljs", :end-column 16, :method-params ([req res p__29702]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([req res {:keys [scheme], :as opts}]))}, IHTTPResponseWriter {:meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/http.cljs", :line 44, :column 14, :end-line 44, :end-column 33, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-write-response [[data res raise]]}}}, :protocol-symbol true, :name macchiato.http/IHTTPResponseWriter, :file "public/js/compiled/dev/macchiato/http.cljs", :end-column 33, :column 1, :line 44, :protocol-info {:methods {-write-response [[data res raise]]}}, :info nil, :end-line 44, :tag any, :impls #{nil cljs.core/PersistentHashMap cljs.core/PersistentArrayMap js/Buffer cljs.core/LazySeq macchiato.http/Stream cljs.core/PersistentVector cljs.core/List string}, :doc nil, :jsdoc ("@interface")}, -write-response {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/http.cljs", :line 45, :column 4, :end-line 45, :end-column 19, :protocol macchiato.http/IHTTPResponseWriter, :doc "Write data to a http.ServerResponse", :arglists (quote ([data res raise]))}, :protocol macchiato.http/IHTTPResponseWriter, :name macchiato.http/-write-response, :variadic false, :file "public/js/compiled/dev/macchiato/http.cljs", :end-column 19, :method-params ([data res raise]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 45, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data res raise])), :doc "Write data to a http.ServerResponse"}, response {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/http.cljs", :line 92, :column 8, :end-line 92, :end-column 16, :private true, :arglists (quote ([request-map node-server-response raise opts]))}, :private true, :name macchiato.http/response, :variadic false, :file "public/js/compiled/dev/macchiato/http.cljs", :end-column 16, :method-params ([request-map node-server-response raise opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 4, :fn-var true, :arglists (quote ([request-map node-server-response raise opts]))}, error-handler {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/http.cljs", :line 101, :column 8, :end-line 101, :end-column 21, :private true, :arglists (quote ([node-server-response]))}, :private true, :name macchiato.http/error-handler, :variadic false, :file "public/js/compiled/dev/macchiato/http.cljs", :end-column 21, :method-params ([node-server-response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node-server-response]))}, handler {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/http.cljs", :line 108, :column 7, :end-line 108, :end-column 14, :arglists (quote ([http-handler opts]))}, :name macchiato.http/handler, :variadic false, :file "public/js/compiled/dev/macchiato/http.cljs", :end-column 14, :method-params ([http-handler opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 2, :fn-var true, :arglists (quote ([http-handler opts]))}, ws-handler {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/http.cljs", :line 115, :column 7, :end-line 115, :end-column 17, :arglists (quote ([handler websocket]))}, :name macchiato.http/ws-handler, :variadic false, :file "public/js/compiled/dev/macchiato/http.cljs", :end-column 17, :method-params ([handler websocket]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler websocket]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:address :get :websocket :ssl-client-cert :else :protocol :subdomains :cookies :remote-addr :secure? :params :stale? :hostname :node/request :port :xhr? :headers :server-port :content-length :websocket? :signed-cookies :status :url :content-type :http :uri :signed? :fresh? :server-name :query-string :body :keywordize-keys :scheme :request-method :node/response}, :order [:scheme :keywordize-keys :ssl-client-cert :protocol :subdomains :cookies :remote-addr :secure? :params :stale? :hostname :node/request :xhr? :headers :server-port :content-length :signed-cookies :url :content-type :uri :fresh? :server-name :query-string :body :request-method :node/response :http :port :address :status :else :signed? :websocket :websocket? :get]}, :doc nil}