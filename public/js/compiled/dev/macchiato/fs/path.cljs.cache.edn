{:rename-macros {}, :renames {}, :externs {Object {keys {}}}, :use-macros {ends-with? clojure.string}, :excludes #{}, :name macchiato.fs.path, :imports nil, :requires {clojure.string clojure.string, s cljs.spec, cljs.spec cljs.spec, node cljs.nodejs, cljs.nodejs cljs.nodejs}, :uses {ends-with? clojure.string}, :defs {with-separator {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 99, :column 7, :end-line 99, :end-column 21, :arglists (quote ([path])), :doc "Receives a path, and returns the same value if it ends in a path separator,\n  or the path with the path separator appended at the end if otherwise."}, :name macchiato.fs.path/with-separator, :variadic false, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :end-column 21, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Receives a path, and returns the same value if it ends in a path separator,\n  or the path with the path separator appended at the end if otherwise."}, separator {:name macchiato.fs.path/separator, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :line 8, :column 1, :end-line 8, :end-column 15, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 8, :column 6, :end-line 8, :end-column 15}, :tag any}, absolute? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 56, :column 7, :end-line 56, :end-column 16, :arglists (quote ([path])), :doc "true if path is absolute\n   args: [path]\n   returns: bool"}, :name macchiato.fs.path/absolute?, :variadic false, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :end-column 16, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "true if path is absolute\n   args: [path]\n   returns: bool"}, dirname {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 34, :column 7, :end-line 34, :end-column 14, :arglists (quote ([path])), :doc "Returns the dirname of the path\n   args: [path]\n   return: string"}, :name macchiato.fs.path/dirname, :variadic false, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :end-column 14, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Returns the dirname of the path\n   args: [path]\n   return: string"}, normalize {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 70, :column 7, :end-line 70, :end-column 16, :arglists (quote ([path])), :doc "Resolves . and .. segments of path\n   args: [path]\n   returns: string"}, :name macchiato.fs.path/normalize, :variadic false, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :end-column 16, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Resolves . and .. segments of path\n   args: [path]\n   returns: string"}, relative {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 85, :column 7, :end-line 85, :end-column 15, :arglists (quote ([from to])), :doc "The relative path from `from` to `to`\n   args: [from to]\n   returns: string"}, :name macchiato.fs.path/relative, :variadic false, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :end-column 15, :method-params ([from to]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([from to])), :doc "The relative path from `from` to `to`\n   args: [from to]\n   returns: string"}, join {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 63, :column 7, :end-line 63, :end-column 11, :arglists (quote ([& ps])), :doc "Joins path segments together\n   args: [& segments]\n   returns: string", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :name macchiato.fs.path/join, :variadic true, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 0, :fn-var true, :arglists ([& ps]), :doc "Joins path segments together\n   args: [& segments]\n   returns: string"}, basename {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 27, :column 7, :end-line 27, :end-column 15, :arglists (quote ([path])), :doc "Returns the basename (file without directory) of the path\n   args: path\n   return: string"}, :name macchiato.fs.path/basename, :variadic false, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :end-column 15, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Returns the basename (file without directory) of the path\n   args: path\n   return: string"}, format {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 48, :column 7, :end-line 48, :end-column 13, :arglists (quote ([{:keys [dir root base name ext]}])), :doc "Turns a map of the form returned by `parse` into a string\n   args [map]\n   returns: string"}, :name macchiato.fs.path/format, :variadic false, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :end-column 13, :method-params ([p__28781]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [dir root base name ext]}])), :doc "Turns a map of the form returned by `parse` into a string\n   args [map]\n   returns: string"}, obj->map {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 17, :column 8, :end-line 17, :end-column 16, :private true, :arglists (quote ([o & {:keys [keywordize? transform], :or {keywordize? true, transform identity}}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(o {:keys [keywordize? transform], :or {keywordize? true, transform identity}})], :arglists ([o & {:keys [keywordize? transform], :or {keywordize? true, transform identity}}]), :arglists-meta (nil)}}, :private true, :name macchiato.fs.path/obj->map, :variadic true, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(o {:keys [keywordize? transform], :or {keywordize? true, transform identity}})], :arglists ([o & {:keys [keywordize? transform], :or {keywordize? true, transform identity}}]), :arglists-meta (nil)}, :method-params [(o {:keys [keywordize? transform], :or {keywordize? true, transform identity}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists ([o & {:keys [keywordize? transform], :or {keywordize? true, transform identity}}])}, js-apply {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 10, :column 8, :end-line 10, :end-column 16, :private true, :arglists (quote ([f this args])), :doc "Applies a javascript function to a 'this' context and arguments\n   args: [f this args]\n   returns: result of calling f with args"}, :private true, :name macchiato.fs.path/js-apply, :variadic false, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :end-column 16, :method-params ([f this args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f this args])), :doc "Applies a javascript function to a 'this' context and arguments\n   args: [f this args]\n   returns: result of calling f with args"}, delimiter {:name macchiato.fs.path/delimiter, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :line 7, :column 1, :end-line 7, :end-column 15, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 7, :column 6, :end-line 7, :end-column 15}, :tag any}, extension {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 41, :column 7, :end-line 41, :end-column 16, :arglists (quote ([path])), :doc "Returns the extension of the file path (dot included)\n   args: [path]\n   return: string"}, :name macchiato.fs.path/extension, :variadic false, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :end-column 16, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Returns the extension of the file path (dot included)\n   args: [path]\n   return: string"}, parse {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 77, :column 7, :end-line 77, :end-column 12, :arglists (quote ([path])), :doc "Returns a map describing the file path\n   args: [path]\n   returns: map with keys (all string values):\n     :root :dir :base :ext :name"}, :name macchiato.fs.path/parse, :variadic false, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :end-column 12, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Returns a map describing the file path\n   args: [path]\n   returns: map with keys (all string values):\n     :root :dir :base :ext :name"}, resolve {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 92, :column 7, :end-line 92, :end-column 14, :arglists (quote ([& ps])), :doc "Joins the given path segments and absolutifies\n   args [& segments]\n   returns: string", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :name macchiato.fs.path/resolve, :variadic true, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 0, :fn-var true, :arglists ([& ps]), :doc "Joins the given path segments and absolutifies\n   args [& segments]\n   returns: string"}, js-path {:name macchiato.fs.path/js-path, :file "public/js/compiled/dev/macchiato/fs/path.cljs", :line 6, :column 1, :end-line 6, :end-column 13, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs/path.cljs", :line 6, :column 6, :end-line 6, :end-column 13}, :tag any}}, :require-macros {s cljs.spec, cljs.spec cljs.spec}, :cljs.analyzer/constants {:seen #{:keywordize? :ext :transform :dir :name :root :base}, :order [:keywordize? :transform :dir :root :base :name :ext]}, :doc nil}