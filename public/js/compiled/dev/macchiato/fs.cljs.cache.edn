{:rename-macros {}, :renames {}, :externs {Object {keys {}}}, :use-macros {}, :excludes #{exists?}, :name macchiato.fs, :imports nil, :requires {node cljs.nodejs, cljs.nodejs cljs.nodejs}, :uses nil, :defs {slurp {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 28, :column 7, :end-line 28, :end-column 12, :arglists (quote ([filename & {:keys [encoding]}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(filename {:keys [encoding]})], :arglists ([filename & {:keys [encoding]}]), :arglists-meta (nil)}}, :name macchiato.fs/slurp, :variadic true, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(filename {:keys [encoding]})], :arglists ([filename & {:keys [encoding]}]), :arglists-meta (nil)}, :method-params [(filename {:keys [encoding]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists ([filename & {:keys [encoding]}])}, fs {:name macchiato.fs/fs, :file "public/js/compiled/dev/macchiato/fs.cljs", :line 5, :column 1, :end-line 5, :end-column 8, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 5, :column 6, :end-line 5, :end-column 8}, :tag any}, spit {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 42, :column 7, :end-line 42, :end-column 11, :arglists (quote ([filename data & {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}}])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(filename data {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}})], :arglists ([filename data & {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}}]), :arglists-meta (nil)}}, :name macchiato.fs/spit, :variadic true, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(filename data {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}})], :arglists ([filename data & {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}}]), :arglists-meta (nil)}, :method-params [(filename data {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists ([filename data & {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}}])}, slurp-async {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 35, :column 7, :end-line 35, :end-column 18, :arglists (quote ([filename cb & {:keys [encoding]}])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(filename cb {:keys [encoding]})], :arglists ([filename cb & {:keys [encoding]}]), :arglists-meta (nil)}}, :name macchiato.fs/slurp-async, :variadic true, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(filename cb {:keys [encoding]})], :arglists ([filename cb & {:keys [encoding]}]), :arglists-meta (nil)}, :method-params [(filename cb {:keys [encoding]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists ([filename cb & {:keys [encoding]}])}, stat {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 62, :column 7, :end-line 62, :end-column 11, :arglists (quote ([path]))}, :name macchiato.fs/stat, :variadic false, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 11, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, write-stream {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 73, :column 7, :end-line 73, :end-column 19, :arglists (quote ([path]))}, :name macchiato.fs/write-stream, :variadic false, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 19, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, pipe {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 76, :column 7, :end-line 76, :end-column 11, :arglists (quote ([input-stream output-stream]))}, :name macchiato.fs/pipe, :variadic false, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 11, :method-params ([input-stream output-stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists (quote ([input-stream output-stream]))}, delete {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 56, :column 7, :end-line 56, :end-column 13, :arglists (quote ([file]))}, :name macchiato.fs/delete, :variadic false, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 13, :method-params ([file]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([file]))}, spit-async {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 49, :column 7, :end-line 49, :end-column 17, :arglists (quote ([filename data on-error & {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}, :as opts}])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(filename data on-error {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}, :as opts})], :arglists ([filename data on-error & {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}, :as opts}]), :arglists-meta (nil)}}, :name macchiato.fs/spit-async, :variadic true, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(filename data on-error {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}, :as opts})], :arglists ([filename data on-error & {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}, :as opts}]), :arglists-meta (nil)}, :method-params [(filename data on-error {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}, :as opts})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 3, :fn-var true, :arglists ([filename data on-error & {:keys [encoding mode flag], :or {encoding "utf8", mode "0o666", flag "w"}, :as opts}])}, file? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 17, :column 7, :end-line 17, :end-column 12, :arglists (quote ([path]))}, :name macchiato.fs/file?, :variadic false, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 12, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, read-stream {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 70, :column 7, :end-line 70, :end-column 18, :arglists (quote ([path]))}, :name macchiato.fs/read-stream, :variadic false, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 18, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, stat-async {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 66, :column 7, :end-line 66, :end-column 17, :arglists (quote ([path cb]))}, :name macchiato.fs/stat-async, :variadic false, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 17, :method-params ([path cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path cb]))}, exists? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 14, :column 7, :end-line 14, :end-column 14, :arglists (quote ([path]))}, :name macchiato.fs/exists?, :variadic false, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 14, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, obj->clj {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 7, :column 8, :end-line 7, :end-column 16, :private true, :arglists (quote ([obj]))}, :private true, :name macchiato.fs/obj->clj, :variadic false, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 16, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, read-dir-sync {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 23, :column 7, :end-line 23, :end-column 20, :arglists (quote ([path])), :doc "Reads a folder synchronously and returns the file names as a Clojure vector."}, :name macchiato.fs/read-dir-sync, :variadic false, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 20, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Reads a folder synchronously and returns the file names as a Clojure vector."}, directory? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 20, :column 7, :end-line 20, :end-column 17, :arglists (quote ([path]))}, :name macchiato.fs/directory?, :variadic false, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 17, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, delete-async {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/fs.cljs", :line 59, :column 7, :end-line 59, :end-column 19, :arglists (quote ([file on-error]))}, :name macchiato.fs/delete-async, :variadic false, :file "public/js/compiled/dev/macchiato/fs.cljs", :end-column 19, :method-params ([file on-error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([file on-error]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:encoding :flag :mode}, :order [:encoding :mode :flag]}, :doc nil}