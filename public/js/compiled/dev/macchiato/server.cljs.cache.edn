{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name macchiato.server, :imports nil, :requires {node cljs.nodejs, cljs.nodejs cljs.nodejs, fs macchiato.fs, macchiato.fs macchiato.fs, http macchiato.http, macchiato.http macchiato.http}, :uses nil, :defs {ws {:name macchiato.server/ws, :file "public/js/compiled/dev/macchiato/server.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :no-doc true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/server.cljs", :line 7, :column 15, :end-line 7, :end-column 17, :no-doc true}, :tag any}, http-server {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/server.cljs", :line 9, :column 7, :end-line 9, :end-column 18, :arglists (quote ([{:keys [handler host port on-success websockets?], :as opts}])), :doc ":host - hostname to bind\n  :port - HTTP port the server will listen on\n  :handler - Macchiato handler function for handling request/response\n  :on-success - success callback that's called when server starts listening"}, :name macchiato.server/http-server, :variadic false, :file "public/js/compiled/dev/macchiato/server.cljs", :end-column 18, :method-params ([p__29794]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [handler host port on-success websockets?], :as opts}])), :doc ":host - hostname to bind\n  :port - HTTP port the server will listen on\n  :handler - Macchiato handler function for handling request/response\n  :on-success - success callback that's called when server starts listening"}, https-server {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/server.cljs", :line 20, :column 7, :end-line 20, :end-column 19, :arglists (quote ([{:keys [handler host port on-success private-key certificate], :as opts}])), :doc ":host - hostname to bind\n  :port - HTTP port the server will listen on\n  :handler - Macchiato handler function for handling request/response\n  :on-success - success callback that's called when server starts listening\n  :private-key - path to the private key\n  :certificate - path to the certificate for the key"}, :name macchiato.server/https-server, :variadic false, :file "public/js/compiled/dev/macchiato/server.cljs", :end-column 19, :method-params ([p__29799]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [handler host port on-success private-key certificate], :as opts}])), :doc ":host - hostname to bind\n  :port - HTTP port the server will listen on\n  :handler - Macchiato handler function for handling request/response\n  :on-success - success callback that's called when server starts listening\n  :private-key - path to the private key\n  :certificate - path to the certificate for the key"}, start {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/server.cljs", :line 35, :column 7, :end-line 35, :end-column 12, :arglists (quote ([{:keys [handler host port protocol], :or {host "0.0.0.0", protocol :http}, :as opts}])), :doc ":host - hostname to bind (default 0.0.0.0)\n  :port - HTTP port the server will listen on\n  :protocol - :http or :https  (default :http)\n  :handler - Macchiato handler function for handling request/response\n  :on-success - success callback that's called when server starts listening\n  :private-key - path to the private key (only used when protocol is :https)\n  :websockets? - boolean for enabling websockets\n  :certificate - path to the certificate for the key (only used when protocol is :https)"}, :name macchiato.server/start, :variadic false, :file "public/js/compiled/dev/macchiato/server.cljs", :end-column 12, :method-params ([p__29804]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [handler host port protocol], :or {host "0.0.0.0", protocol :http}, :as opts}])), :doc ":host - hostname to bind (default 0.0.0.0)\n  :port - HTTP port the server will listen on\n  :protocol - :http or :https  (default :http)\n  :handler - Macchiato handler function for handling request/response\n  :on-success - success callback that's called when server starts listening\n  :private-key - path to the private key (only used when protocol is :https)\n  :websockets? - boolean for enabling websockets\n  :certificate - path to the certificate for the key (only used when protocol is :https)"}, start-ws {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/server.cljs", :line 53, :column 7, :end-line 53, :end-column 15, :arglists (quote ([server handler])), :doc "starts a WebSocket server given a handler and a Node server instance"}, :name macchiato.server/start-ws, :variadic false, :file "public/js/compiled/dev/macchiato/server.cljs", :end-column 15, :method-params ([server handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([server handler])), :doc "starts a WebSocket server given a handler and a Node server instance"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:key :protocol :websockets? :cert :on-success :port :certificate :host :http :private-key :handler :scheme :https}, :order [:handler :host :port :on-success :websockets? :scheme :http :private-key :certificate :https :key :cert :protocol]}, :doc nil}