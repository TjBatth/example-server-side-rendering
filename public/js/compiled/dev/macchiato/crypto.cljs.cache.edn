{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name macchiato.crypto, :imports nil, :requires {node cljs.nodejs, cljs.nodejs cljs.nodejs}, :uses nil, :defs {crypto {:name macchiato.crypto/crypto, :file "public/js/compiled/dev/macchiato/crypto.cljs", :line 5, :column 1, :end-line 5, :end-column 21, :no-doc true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/crypto.cljs", :line 5, :column 15, :end-line 5, :end-column 21, :no-doc true}, :tag any}, encryptor {:name macchiato.crypto/encryptor, :file "public/js/compiled/dev/macchiato/crypto.cljs", :line 6, :column 1, :end-line 6, :end-column 24, :no-doc true, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/crypto.cljs", :line 6, :column 15, :end-line 6, :end-column 24, :no-doc true}, :tag any}, encrypt {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/crypto.cljs", :line 8, :column 7, :end-line 8, :end-column 14, :arglists (quote ([key data]))}, :name macchiato.crypto/encrypt, :variadic false, :file "public/js/compiled/dev/macchiato/crypto.cljs", :end-column 14, :method-params ([key data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key data]))}, decrypt {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/crypto.cljs", :line 11, :column 7, :end-line 11, :end-column 14, :arglists (quote ([key data]))}, :name macchiato.crypto/decrypt, :variadic false, :file "public/js/compiled/dev/macchiato/crypto.cljs", :end-column 14, :method-params ([key data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key data]))}, hmac {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/crypto.cljs", :line 14, :column 7, :end-line 14, :end-column 11, :arglists (quote ([key data]))}, :name macchiato.crypto/hmac, :variadic false, :file "public/js/compiled/dev/macchiato/crypto.cljs", :end-column 11, :method-params ([key data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key data]))}, eq? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/crypto.cljs", :line 17, :column 7, :end-line 17, :end-column 10, :arglists (quote ([a b])), :doc "Test whether two sequences of characters or bytes are equal in a way that\n  protects against timing attacks. Note that this does not prevent an attacker\n  from discovering the *length* of the data being compared."}, :name macchiato.crypto/eq?, :variadic false, :file "public/js/compiled/dev/macchiato/crypto.cljs", :end-column 10, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Test whether two sequences of characters or bytes are equal in a way that\n  protects against timing attacks. Note that this does not prevent an attacker\n  from discovering the *length* of the data being compared."}, random-base64 {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/crypto.cljs", :line 27, :column 7, :end-line 27, :end-column 20, :arglists (quote ([n])), :doc "generates a random base64 string of length n"}, :name macchiato.crypto/random-base64, :variadic false, :file "public/js/compiled/dev/macchiato/crypto.cljs", :end-column 20, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "generates a random base64 string of length n"}}, :require-macros nil, :doc nil}