{:rename-macros {}, :renames {}, :externs {Object {keys {}}}, :use-macros {}, :excludes #{}, :name macchiato.middleware.multipart-params, :imports nil, :requires {node cljs.nodejs, cljs.nodejs cljs.nodejs, np macchiato.middleware.nested-params, macchiato.middleware.nested-params macchiato.middleware.nested-params, req macchiato.util.request, macchiato.util.request macchiato.util.request}, :uses nil, :defs {multiparty {:name macchiato.middleware.multipart-params/multiparty, :file "public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :line 8, :column 1, :end-line 8, :end-column 16, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :line 8, :column 6, :end-line 8, :end-column 16}, :tag any}, multipart-form? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :line 10, :column 8, :end-line 10, :end-column 23, :private true, :arglists (quote ([request])), :doc "Does a request have a multipart form?"}, :private true, :name macchiato.middleware.multipart-params/multipart-form?, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :end-column 23, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Does a request have a multipart form?"}, parse-opts {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :line 15, :column 8, :end-line 15, :end-column 18, :private true, :arglists (quote ([{:keys [encoding max-fields-size max-fields max-files-size upload-dir]}]))}, :private true, :name macchiato.middleware.multipart-params/parse-opts, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :end-column 18, :method-params ([p__29869]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [encoding max-fields-size max-fields max-files-size upload-dir]}]))}, parse-params {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :line 26, :column 8, :end-line 26, :end-column 20, :private true, :arglists (quote ([fields]))}, :private true, :name macchiato.middleware.multipart-params/parse-params, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :end-column 20, :method-params ([fields]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fields]))}, parse-file-param {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :line 34, :column 8, :end-line 34, :end-column 24, :private true, :arglists (quote ([file-param]))}, :private true, :name macchiato.middleware.multipart-params/parse-file-param, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :end-column 24, :method-params ([file-param]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([file-param]))}, parse-file-params {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :line 41, :column 8, :end-line 41, :end-column 25, :private true, :arglists (quote ([files]))}, :private true, :name macchiato.middleware.multipart-params/parse-file-params, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :end-column 25, :method-params ([files]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([files]))}, multipart-request {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :line 47, :column 8, :end-line 47, :end-column 25, :private true, :arglists (quote ([handler request respond raise {:keys [progress-fn], :as opts}]))}, :private true, :name macchiato.middleware.multipart-params/multipart-request, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :end-column 25, :method-params ([handler request respond raise p__29878]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 5, :fn-var true, :arglists (quote ([handler request respond raise {:keys [progress-fn], :as opts}]))}, wrap-multipart {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :line 68, :column 3, :end-line 68, :end-column 17, :macchiato/middleware {:id :wrap-multi-part}, :arglists (quote ([handler & [opts]])), :doc ":encoding - sets encoding for the incoming form fields. Defaults to utf8.\n  :max-fields-size - Limits the amount of memory all fields (not files) can allocate in bytes. If this value is exceeded, an error event is emitted. The default size is 2MB.\n  :max-fields - Limits the number of fields that will be parsed before emitting an error event. A file counts as a field in this case. Defaults to 1000.\n  :max-files-size - Only relevant when autoFiles is true. Limits the total bytes accepted for all files combined. If this value is exceeded, an error event is emitted. The default is Infinity.\n  :upload-dir - Only relevant when autoFiles is true. The directory for placing file uploads in. Defaults to (.tmpDir os).\n  :progress-fn - function that will be called when bytes are received, should expect two fields: bytes-eeceived, bytes-expected", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(handler [opts])], :arglists ([handler & [opts]]), :arglists-meta (nil)}}, :macchiato/middleware {:id :wrap-multi-part}, :name macchiato.middleware.multipart-params/wrap-multipart, :variadic true, :file "public/js/compiled/dev/macchiato/middleware/multipart_params.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(handler [opts])], :arglists ([handler & [opts]]), :arglists-meta (nil)}, :method-params [(handler [opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 65, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists ([handler & [opts]]), :doc ":encoding - sets encoding for the incoming form fields. Defaults to utf8.\n  :max-fields-size - Limits the amount of memory all fields (not files) can allocate in bytes. If this value is exceeded, an error event is emitted. The default size is 2MB.\n  :max-fields - Limits the number of fields that will be parsed before emitting an error event. A file counts as a field in this case. Defaults to 1000.\n  :max-files-size - Only relevant when autoFiles is true. Limits the total bytes accepted for all files combined. If this value is exceeded, an error event is emitted. The default is Infinity.\n  :upload-dir - Only relevant when autoFiles is true. The directory for placing file uploads in. Defaults to (.tmpDir os).\n  :progress-fn - function that will be called when bytes are received, should expect two fields: bytes-eeceived, bytes-expected"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:max-fields :path :encoding :maxFilesSize :maxFieldsSize :maxFields :autoFiles :params :size :autoFields :headers :progress-fn :filename :content-type :max-fields-size :uploadDir :originalFilename :max-files-size :body :tempfile :keywordize-keys :multipart-params :upload-dir}, :order [:encoding :max-fields-size :max-fields :max-files-size :upload-dir :autoFields :autoFiles :maxFieldsSize :maxFields :maxFilesSize :uploadDir :keywordize-keys :originalFilename :path :size :headers :filename :tempfile :content-type :progress-fn :body :multipart-params :params]}, :doc nil}