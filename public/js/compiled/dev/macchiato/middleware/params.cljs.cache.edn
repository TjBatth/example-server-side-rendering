{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name macchiato.middleware.params, :imports nil, :requires {node cljs.nodejs, cljs.nodejs cljs.nodejs, req macchiato.util.request, macchiato.util.request macchiato.util.request}, :uses nil, :defs {qs {:name macchiato.middleware.params/qs, :file "public/js/compiled/dev/macchiato/middleware/params.cljs", :line 6, :column 1, :end-line 6, :end-column 8, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/params.cljs", :line 6, :column 6, :end-line 6, :end-column 8}, :tag any}, concat-stream {:name macchiato.middleware.params/concat-stream, :file "public/js/compiled/dev/macchiato/middleware/params.cljs", :line 8, :column 1, :end-line 8, :end-column 19, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/params.cljs", :line 8, :column 6, :end-line 8, :end-column 19}, :tag any}, decode {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/params.cljs", :line 10, :column 7, :end-line 10, :end-column 13, :arglists (quote ([s]))}, :name macchiato.middleware.params/decode, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/params.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, parse-params {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/params.cljs", :line 13, :column 8, :end-line 13, :end-column 20, :private true, :arglists (quote ([params]))}, :private true, :name macchiato.middleware.params/parse-params, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/params.cljs", :end-column 20, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}, assoc-query-params {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/params.cljs", :line 17, :column 7, :end-line 17, :end-column 25, :arglists (quote ([request])), :doc "Parse and assoc parameters from the query string with the request."}, :name macchiato.middleware.params/assoc-query-params, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/params.cljs", :end-column 25, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Parse and assoc parameters from the query string with the request."}, assoc-form-params {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/params.cljs", :line 26, :column 7, :end-line 26, :end-column 24, :arglists (quote ([request])), :doc "Parse and assoc parameters from the request body with the request."}, :name macchiato.middleware.params/assoc-form-params, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/params.cljs", :end-column 24, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Parse and assoc parameters from the request body with the request."}, params-request {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/params.cljs", :line 35, :column 7, :end-line 35, :end-column 21, :arglists (quote ([request] [request options])), :doc "Adds parameters from the query string and the request body to the request\n  map. See: wrap-params.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([request] [request options]), :arglists ([request] [request options]), :arglists-meta (nil nil)}}, :name macchiato.middleware.params/params-request, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/params.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([request] [request options]), :arglists ([request] [request options]), :arglists-meta (nil nil)}, :method-params ([request] [request options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists ([request] [request options]), :doc "Adds parameters from the query string and the request body to the request\n  map. See: wrap-params."}, wrap-params {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/params.cljs", :line 51, :column 3, :end-line 51, :end-column 14, :macchiato/middleware {:id :wrap-params}, :arglists (quote ([handler] [handler options])), :doc "Middleware to parse urlencoded parameters from the query string and form\n  body (if the request is a url-encoded form). Adds the following keys to\n  the request map:\n  :query-params - a map of parameters from the query string\n  :form-params  - a map of parameters from the body\n  :params       - a merged map of all types of parameter\n  Accepts the following options:\n  :encoding - encoding to use for url-decoding. If not specified, uses\n              the request character encoding, or \"UTF-8\" if no request\n              character encoding is set.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([handler] [handler options]), :arglists ([handler] [handler options]), :arglists-meta (nil nil)}}, :macchiato/middleware {:id :wrap-params}, :name macchiato.middleware.params/wrap-params, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/params.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([handler] [handler options]), :arglists ([handler] [handler options]), :arglists-meta (nil nil)}, :method-params ([handler] [handler options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists ([handler] [handler options]), :doc "Middleware to parse urlencoded parameters from the query string and form\n  body (if the request is a url-encoded form). Adds the following keys to\n  the request map:\n  :query-params - a map of parameters from the query string\n  :form-params  - a map of parameters from the body\n  :params       - a merged map of all types of parameter\n  Accepts the following options:\n  :encoding - encoding to use for url-decoding. If not specified, uses\n              the request character encoding, or \"UTF-8\" if no request\n              character encoding is set."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:encoding :params :form-params :query-params :query-string :body}, :order [:query-string :query-params :params :body :form-params :encoding]}, :doc nil}