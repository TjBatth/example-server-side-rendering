{:rename-macros {}, :renames {}, :externs {Date {prototype {toUTCString {}}}, Error {}}, :use-macros {}, :excludes #{}, :name macchiato.middleware.file, :imports nil, :requires {node cljs.nodejs, cljs.nodejs cljs.nodejs, cljs-time.core cljs-time.core, fs macchiato.fs, macchiato.fs macchiato.fs, res macchiato.util.response, macchiato.util.response macchiato.util.response, macchiato.util.mime-type macchiato.util.mime-type}, :uses {ext-mime-type macchiato.util.mime-type, before? cljs-time.core}, :defs {Stream {:name macchiato.middleware.file/Stream, :file "public/js/compiled/dev/macchiato/middleware/file.cljs", :line 9, :column 1, :end-line 9, :end-column 12, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/file.cljs", :line 9, :column 6, :end-line 9, :end-column 12}, :tag any}, etag {:name macchiato.middleware.file/etag, :file "public/js/compiled/dev/macchiato/middleware/file.cljs", :line 10, :column 1, :end-line 10, :end-column 10, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/file.cljs", :line 10, :column 6, :end-line 10, :end-column 10}, :tag any}, guess-mime-type {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/file.cljs", :line 12, :column 8, :end-line 12, :end-column 23, :private true, :arglists (quote ([file mime-types])), :doc "Returns a String corresponding to the guessed mime type for the given file,\n  or application/octet-stream if a type cannot be guessed."}, :private true, :name macchiato.middleware.file/guess-mime-type, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/file.cljs", :end-column 23, :method-params ([file mime-types]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([file mime-types])), :doc "Returns a String corresponding to the guessed mime type for the given file,\n  or application/octet-stream if a type cannot be guessed."}, file-stats {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/file.cljs", :line 19, :column 8, :end-line 19, :end-column 18, :private true, :arglists (quote ([stream mime-types]))}, :private true, :name macchiato.middleware.file/file-stats, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/file.cljs", :end-column 18, :method-params ([stream mime-types]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([stream mime-types]))}, file-info-response {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/file.cljs", :line 26, :column 7, :end-line 26, :end-column 25, :arglists (quote ([response request] [response request mime-types])), :doc "Adds headers to response as described in wrap-file-info.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([response request] [response request mime-types]), :arglists ([response request] [response request mime-types]), :arglists-meta (nil nil)}}, :name macchiato.middleware.file/file-info-response, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/file.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([response request] [response request mime-types]), :arglists ([response request] [response request mime-types]), :arglists-meta (nil nil)}, :method-params ([response request] [response request mime-types]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists ([response request] [response request mime-types]), :doc "Adds headers to response as described in wrap-file-info."}, wrap-file {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/file.cljs", :line 49, :column 3, :end-line 49, :end-column 12, :macchiato/middleware {:id :wrap-file}, :arglists (quote ([handler] [handler mime-types])), :doc "Wrap a handler such that responses with a file for a body will have\n  corresponding Content-Type, Content-Length, and Last Modified headers added if\n  they can be determined from the file.\n  If the request specifies a If-Modified-Since header that matches the last\n  modification date of the file, a 304 Not Modified response is returned.\n  If two arguments are given, the second is taken to be a map of file extensions\n  to content types that will supplement the default, built-in map.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([handler] [handler mime-types]), :arglists ([handler] [handler mime-types]), :arglists-meta (nil nil)}}, :macchiato/middleware {:id :wrap-file}, :name macchiato.middleware.file/wrap-file, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/file.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([handler] [handler mime-types]), :arglists ([handler] [handler mime-types]), :arglists-meta (nil nil)}, :method-params ([handler] [handler mime-types]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists ([handler] [handler mime-types]), :doc "Wrap a handler such that responses with a file for a body will have\n  corresponding Content-Type, Content-Length, and Last Modified headers added if\n  they can be determined from the file.\n  If the request specifies a If-Modified-Since header that matches the last\n  modification date of the file, a 304 Not Modified response is returned.\n  If two arguments are given, the second is taken to be a map of file extensions\n  to content types that will supplement the default, built-in map."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:type :etag :if-none-match :size :headers :lmodified :body :mtime}, :order [:etag :lmodified :size :type :mtime :body :headers :if-none-match]}, :doc nil}