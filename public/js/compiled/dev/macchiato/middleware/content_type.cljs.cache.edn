{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name macchiato.middleware.content-type, :imports nil, :requires {macchiato.util.mime-type macchiato.util.mime-type, macchiato.util.response macchiato.util.response}, :uses {get-header macchiato.util.response, ext-mime-type macchiato.util.mime-type, content-type macchiato.util.response}, :defs {content-type-response {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/content_type.cljs", :line 6, :column 7, :end-line 6, :end-column 28, :arglists (quote ([response request] [response request options])), :doc "Adds a content-type header to response. See: wrap-content-type.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([response request] [response request options]), :arglists ([response request] [response request options]), :arglists-meta (nil nil)}}, :name macchiato.middleware.content-type/content-type-response, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/content_type.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([response request] [response request options]), :arglists ([response request] [response request options]), :arglists-meta (nil nil)}, :method-params ([response request] [response request options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 3, :fn-var true, :arglists ([response request] [response request options]), :doc "Adds a content-type header to response. See: wrap-content-type."}, wrap-content-type {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/content_type.cljs", :line 20, :column 3, :end-line 20, :end-column 20, :macchiato/middleware {:id :wrap-content-type}, :arglists (quote ([handler] [handler options])), :doc "Middleware that adds a content-type header to the response if one is not\n  set by the handler. Uses the macchiato.util.mime-type/ext-mime-type function to\n  guess the content-type from the file extension in the URI. If no\n  content-type can be found, it defaults to 'application/octet-stream'.\n\n  Accepts the following options:\n\n  :mime-types - a map of filename extensions to mime-types that will be\n                used in addition to the ones defined in\n                macchiato.util.mime-types/default-mime-types", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([handler] [handler options]), :arglists ([handler] [handler options]), :arglists-meta (nil nil)}}, :macchiato/middleware {:id :wrap-content-type}, :name macchiato.middleware.content-type/wrap-content-type, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/content_type.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([handler] [handler options]), :arglists ([handler] [handler options]), :arglists-meta (nil nil)}, :method-params ([handler] [handler options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists ([handler] [handler options]), :doc "Middleware that adds a content-type header to the response if one is not\n  set by the handler. Uses the macchiato.util.mime-type/ext-mime-type function to\n  guess the content-type from the file extension in the URI. If no\n  content-type can be found, it defaults to 'application/octet-stream'.\n\n  Accepts the following options:\n\n  :mime-types - a map of filename extensions to mime-types that will be\n                used in addition to the ones defined in\n                macchiato.util.mime-types/default-mime-types"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:uri :mime-types}, :order [:uri :mime-types]}, :doc "Middleware for automatically adding a content type to response maps."}