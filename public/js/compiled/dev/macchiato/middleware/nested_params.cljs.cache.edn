{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name macchiato.middleware.nested-params, :imports nil, :requires nil, :uses nil, :defs {assoc-conj {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :line 3, :column 7, :end-line 3, :end-column 17, :arglists (quote ([map key val])), :doc "Associate a key with a value in a map. If the key already exists in the map,\n  a vector of values is associated with the key."}, :name macchiato.middleware.nested-params/assoc-conj, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :end-column 17, :method-params ([map key val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 3, :fn-var true, :arglists (quote ([map key val])), :doc "Associate a key with a value in a map. If the key already exists in the map,\n  a vector of values is associated with the key."}, parse-nested-keys {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :line 14, :column 7, :end-line 14, :end-column 24, :arglists (quote ([param-name])), :doc "Parse a parameter name into a list of keys using a 'C'-like index\n  notation.\n  For example:\n    \"foo[bar][][baz]\"\n    => [\"foo\" \"bar\" \"\" \"baz\"]"}, :name macchiato.middleware.nested-params/parse-nested-keys, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :end-column 24, :method-params ([param-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([param-name])), :doc "Parse a parameter name into a list of keys using a 'C'-like index\n  notation.\n  For example:\n    \"foo[bar][][baz]\"\n    => [\"foo\" \"bar\" \"\" \"baz\"]"}, assoc-vec {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :line 25, :column 8, :end-line 25, :end-column 17, :private true, :arglists (quote ([m k v]))}, :private true, :name macchiato.middleware.nested-params/assoc-vec, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :end-column 17, :method-params ([m k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m k v]))}, assoc-nested {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :line 29, :column 8, :end-line 29, :end-column 20, :private true, :arglists (quote ([m [k & ks] v])), :doc "Similar to assoc-in, but treats values of blank keys as elements in a\n  list."}, :private true, :name macchiato.middleware.nested-params/assoc-nested, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :end-column 20, :method-params ([m p__27272 v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m [k & ks] v])), :doc "Similar to assoc-in, but treats values of blank keys as elements in a\n  list."}, param-pairs {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :line 44, :column 8, :end-line 44, :end-column 19, :private true, :arglists (quote ([params])), :doc "Return a list of name-value pairs for a parameter map."}, :private true, :name macchiato.middleware.nested-params/param-pairs, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :end-column 19, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params])), :doc "Return a list of name-value pairs for a parameter map."}, nest-params {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :line 54, :column 8, :end-line 54, :end-column 19, :private true, :arglists (quote ([params parse])), :doc "Takes a flat map of parameters and turns it into a nested map of\n  parameters, using the function parse to split the parameter names\n  into keys."}, :private true, :name macchiato.middleware.nested-params/nest-params, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :end-column 19, :method-params ([params parse]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([params parse])), :doc "Takes a flat map of parameters and turns it into a nested map of\n  parameters, using the function parse to split the parameter names\n  into keys."}, nested-params-request {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :line 65, :column 7, :end-line 65, :end-column 28, :arglists (quote ([request] [request options])), :doc "Converts a request with a flat map of parameters to a nested map.\n  See: wrap-nested-params.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([request] [request options]), :arglists ([request] [request options]), :arglists-meta (nil nil)}}, :name macchiato.middleware.nested-params/nested-params-request, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([request] [request options]), :arglists ([request] [request options]), :arglists-meta (nil nil)}, :method-params ([request] [request options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists ([request] [request options]), :doc "Converts a request with a flat map of parameters to a nested map.\n  See: wrap-nested-params."}, wrap-nested-params {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :line 78, :column 3, :end-line 78, :end-column 21, :macchiato/middleware {:id :wrap-nested-params, :required [:wrap-params]}, :arglists (quote ([handler] [handler options])), :doc "Middleware to converts a flat map of parameters into a nested map.\n  Accepts the following options:\n  :key-parser - the function to use to parse the parameter names into a list\n                of keys. Keys that are empty strings are treated as elements in\n                a vector, non-empty keys are treated as elements in a map.\n                Defaults to the parse-nested-keys function.\n  For example:\n    {\"foo[bar]\" \"baz\"}\n    => {\"foo\" {\"bar\" \"baz\"}}\n    {\"foo[]\" \"bar\"}\n    => {\"foo\" [\"bar\"]}", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([handler] [handler options]), :arglists ([handler] [handler options]), :arglists-meta (nil nil)}}, :macchiato/middleware {:id :wrap-nested-params, :required [:wrap-params]}, :name macchiato.middleware.nested-params/wrap-nested-params, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/nested_params.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([handler] [handler options]), :arglists ([handler] [handler options]), :arglists-meta (nil nil)}, :method-params ([handler] [handler options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists ([handler] [handler options]), :doc "Middleware to converts a flat map of parameters into a nested map.\n  Accepts the following options:\n  :key-parser - the function to use to parse the parameter names into a list\n                of keys. Keys that are empty strings are treated as elements in\n                a vector, non-empty keys are treated as elements in a map.\n                Defaults to the parse-nested-keys function.\n  For example:\n    {\"foo[bar]\" \"baz\"}\n    => {\"foo\" {\"bar\" \"baz\"}}\n    {\"foo[]\" \"bar\"}\n    => {\"foo\" [\"bar\"]}"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:key-parser :params}, :order [:key-parser :params]}, :doc nil}