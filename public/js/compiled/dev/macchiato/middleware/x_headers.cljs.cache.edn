{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name macchiato.middleware.x-headers, :imports nil, :requires {str cuerdas.core, cuerdas.core cuerdas.core, resp macchiato.util.response, macchiato.util.response macchiato.util.response}, :uses nil, :defs {format-xss-protection {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :line 16, :column 8, :end-line 16, :end-column 29, :private true, :arglists (quote ([enable? mode]))}, :private true, :name macchiato.middleware.x-headers/format-xss-protection, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :end-column 29, :method-params ([enable? mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([enable? mode]))}, allow-from? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :line 6, :column 8, :end-line 6, :end-column 19, :private true, :arglists (quote ([frame-options]))}, :private true, :name macchiato.middleware.x-headers/allow-from?, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :end-column 19, :method-params ([frame-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([frame-options]))}, xss-protection-response {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :line 69, :column 7, :end-line 69, :end-column 30, :arglists (quote ([response enable?] [response enable? options])), :doc "Add the X-XSS-Protection header to the response. See: wrap-xss-protection.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([response enable?] [response enable? options]), :arglists ([response enable?] [response enable? options]), :arglists-meta (nil nil)}}, :name macchiato.middleware.x-headers/xss-protection-response, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([response enable?] [response enable? options]), :arglists ([response enable?] [response enable? options]), :arglists-meta (nil nil)}, :method-params ([response enable?] [response enable? options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 3, :fn-var true, :arglists ([response enable?] [response enable? options]), :doc "Add the X-XSS-Protection header to the response. See: wrap-xss-protection."}, wrap-x-header {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :line 19, :column 8, :end-line 19, :end-column 21, :private true, :arglists (quote ([handler header-name header-value]))}, :private true, :name macchiato.middleware.x-headers/wrap-x-header, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :end-column 21, :method-params ([handler header-name header-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 3, :fn-var true, :arglists (quote ([handler header-name header-value]))}, wrap-content-type-options {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :line 58, :column 3, :end-line 58, :end-column 28, :macchiato/middleware {:id :wrap-content-type-options}, :arglists (quote ([handler content-type-options])), :doc "Middleware that adds the X-Content-Type-Options header to the response. This\n  currently only accepts one option:\n  :nosniff - prevent resources with invalid media types being loaded as\n             stylesheets or scripts\n  This prevents attacks based around media type confusion. See:\n  http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx"}, :macchiato/middleware {:id :wrap-content-type-options}, :name macchiato.middleware.x-headers/wrap-content-type-options, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :end-column 28, :method-params ([handler content-type-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler content-type-options])), :doc "Middleware that adds the X-Content-Type-Options header to the response. This\n  currently only accepts one option:\n  :nosniff - prevent resources with invalid media types being loaded as\n             stylesheets or scripts\n  This prevents attacks based around media type confusion. See:\n  http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx"}, frame-options-response {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :line 23, :column 7, :end-line 23, :end-column 29, :arglists (quote ([response frame-options])), :doc "Add the X-Frame-Options header to the response. See: wrap-frame-options."}, :name macchiato.middleware.x-headers/frame-options-response, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :end-column 29, :method-params ([response frame-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([response frame-options])), :doc "Add the X-Frame-Options header to the response. See: wrap-frame-options."}, content-type-options-response {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :line 49, :column 7, :end-line 49, :end-column 36, :arglists (quote ([response content-type-options])), :doc "Add the X-Content-Type-Options header to the response.\n  See: wrap-content-type-options."}, :name macchiato.middleware.x-headers/content-type-options-response, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :end-column 36, :method-params ([response content-type-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([response content-type-options])), :doc "Add the X-Content-Type-Options header to the response.\n  See: wrap-content-type-options."}, wrap-frame-options {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :line 31, :column 3, :end-line 31, :end-column 21, :macchiato/middleware {:id :wrap-frame-options}, :arglists (quote ([handler frame-options])), :doc "Middleware that adds the X-Frame-Options header to the response. This governs\n  whether your site can be rendered in a <frame>, <iframe> or <object>, and is\n  typically used to prevent clickjacking attacks.\n  The following frame options are allowed:\n  :deny             - prevent any framing of the content\n  :sameorigin       - allow only the current site to frame the content\n  {:allow-from uri} - allow only the specified URI to frame the page\n  The :deny and :sameorigin options are keywords, while the :allow-from option\n  is a map consisting of one key/value pair.\n  Note that browser support for :allow-from is incomplete. See:\n  https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options"}, :macchiato/middleware {:id :wrap-frame-options}, :name macchiato.middleware.x-headers/wrap-frame-options, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :end-column 21, :method-params ([handler frame-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler frame-options])), :doc "Middleware that adds the X-Frame-Options header to the response. This governs\n  whether your site can be rendered in a <frame>, <iframe> or <object>, and is\n  typically used to prevent clickjacking attacks.\n  The following frame options are allowed:\n  :deny             - prevent any framing of the content\n  :sameorigin       - allow only the current site to frame the content\n  {:allow-from uri} - allow only the specified URI to frame the page\n  The :deny and :sameorigin options are keywords, while the :allow-from option\n  is a map consisting of one key/value pair.\n  Note that browser support for :allow-from is incomplete. See:\n  https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options"}, format-frame-options {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :line 11, :column 8, :end-line 11, :end-column 28, :private true, :arglists (quote ([frame-options]))}, :private true, :name macchiato.middleware.x-headers/format-frame-options, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :end-column 28, :method-params ([frame-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([frame-options]))}, wrap-xss-protection {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :line 80, :column 3, :end-line 80, :end-column 22, :macchiato/middleware {:id :wrap-xss-protection}, :arglists (quote ([handler] [handler {:keys [enable? mode]}])), :doc "Middleware that adds the X-XSS-Protection header to the response. This header\n  enables a heuristic filter in browsers for detecting cross-site scripting\n  attacks. Usually on by default.\n  The :enable? key determines whether the filter should be turned on.\n  :mode - currently accepts only :block\n  See: http://msdn.microsoft.com/en-us/library/dd565647(v=vs.85).aspx", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([handler] [handler {:keys [enable? mode]}]), :arglists ([handler] [handler {:keys [enable? mode]}]), :arglists-meta (nil nil)}}, :macchiato/middleware {:id :wrap-xss-protection}, :name macchiato.middleware.x-headers/wrap-xss-protection, :variadic false, :file "public/js/compiled/dev/macchiato/middleware/x_headers.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([handler] [handler {:keys [enable? mode]}]), :arglists ([handler] [handler {:keys [enable? mode]}]), :arglists-meta (nil nil)}, :method-params ([handler] [handler {:keys [enable? mode]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists ([handler] [handler {:keys [enable? mode]}]), :doc "Middleware that adds the X-XSS-Protection header to the response. This header\n  enables a heuristic filter in browsers for detecting cross-site scripting\n  attacks. Usually on by default.\n  The :enable? key determines whether the filter should be turned on.\n  :mode - currently accepts only :block\n  See: http://msdn.microsoft.com/en-us/library/dd565647(v=vs.85).aspx"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:block :sameorigin :allow-from :mode :enable? :nosniff :deny}, :order [:allow-from :block :deny :sameorigin :nosniff :enable? :mode]}, :doc nil}