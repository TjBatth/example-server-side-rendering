{:rename-macros {}, :renames {}, :externs {parseFloat {}, String {}, Error {}}, :use-macros {}, :excludes #{}, :name macchiato.util.request, :imports nil, :requires nil, :uses nil, :defs {re-token {:name macchiato.util.request/re-token, :file "public/js/compiled/dev/macchiato/util/request.cljs", :line 4, :column 1, :end-line 5, :end-column 9, :doc "HTTP token: 1*<any CHAR except CTLs or tspecials>. See RFC2068", :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/util/request.cljs", :line 5, :column 1, :end-line 5, :end-column 9, :doc "HTTP token: 1*<any CHAR except CTLs or tspecials>. See RFC2068"}, :tag any}, re-quoted {:name macchiato.util.request/re-quoted, :file "public/js/compiled/dev/macchiato/util/request.cljs", :line 8, :column 1, :end-line 9, :end-column 10, :doc "HTTP quoted-string: <\"> *<any TEXT except \"> <\">. See RFC2068.", :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/util/request.cljs", :line 9, :column 1, :end-line 9, :end-column 10, :doc "HTTP quoted-string: <\"> *<any TEXT except \"> <\">. See RFC2068."}, :tag any}, request-url {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/util/request.cljs", :line 14, :column 7, :end-line 14, :end-column 18, :arglists (quote ([request])), :doc "Return the full URL of the request."}, :name macchiato.util.request/request-url, :variadic false, :file "public/js/compiled/dev/macchiato/util/request.cljs", :end-column 18, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Return the full URL of the request."}, body-string {:meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/util/request.cljs", :line 53, :column 11, :end-line 53, :end-column 22, :arglists (quote ([request])), :doc "Return the request body as a string."}, :name macchiato.util.request/body-string, :file "public/js/compiled/dev/macchiato/util/request.cljs", :end-column 22, :column 1, :line 53, :end-line 53, :tag cljs.core/MultiFn, :arglists (quote ([request])), :doc "Return the request body as a string."}, content-length {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/util/request.cljs", :line 30, :column 7, :end-line 30, :end-column 21, :arglists (quote ([request])), :doc "Return the content-length of the request, or nil no content-length is set."}, :name macchiato.util.request/content-length, :variadic false, :file "public/js/compiled/dev/macchiato/util/request.cljs", :end-column 21, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Return the content-length of the request, or nil no content-length is set."}, re-value {:name macchiato.util.request/re-value, :file "public/js/compiled/dev/macchiato/util/request.cljs", :line 11, :column 1, :end-line 12, :end-column 9, :doc "HTTP value: token | quoted-string. See RFC2109", :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/util/request.cljs", :line 12, :column 1, :end-line 12, :end-column 9, :doc "HTTP value: token | quoted-string. See RFC2109"}, :tag any}, content-type {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/util/request.cljs", :line 24, :column 7, :end-line 24, :end-column 19, :arglists (quote ([request])), :doc "Return the content-type of the request, or nil if no content-type is set."}, :name macchiato.util.request/content-type, :variadic false, :file "public/js/compiled/dev/macchiato/util/request.cljs", :end-column 19, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Return the content-type of the request, or nil if no content-type is set."}, path-info {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/util/request.cljs", :line 71, :column 7, :end-line 71, :end-column 16, :arglists (quote ([request])), :doc "Returns the relative path of the request."}, :name macchiato.util.request/path-info, :variadic false, :file "public/js/compiled/dev/macchiato/util/request.cljs", :end-column 16, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Returns the relative path of the request."}, character-encoding {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/util/request.cljs", :line 40, :column 7, :end-line 40, :end-column 25, :arglists (quote ([request])), :doc "Return the character encoding for the request, or nil if it is not set."}, :name macchiato.util.request/character-encoding, :variadic false, :file "public/js/compiled/dev/macchiato/util/request.cljs", :end-column 25, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Return the character encoding for the request, or nil if it is not set."}, urlencoded-form? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/util/request.cljs", :line 47, :column 7, :end-line 47, :end-column 23, :arglists (quote ([request])), :doc "True if a request contains a urlencoded form in the body."}, :name macchiato.util.request/urlencoded-form?, :variadic false, :file "public/js/compiled/dev/macchiato/util/request.cljs", :end-column 23, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "True if a request contains a urlencoded form in the body."}, set-context {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/util/request.cljs", :line 83, :column 7, :end-line 83, :end-column 18, :arglists (quote ([request context])), :doc "Associate a context and path-info with the  request. The request URI must be\n  a subpath of the supplied context.", :added "1.2"}, :added "1.2", :name macchiato.util.request/set-context, :variadic false, :file "public/js/compiled/dev/macchiato/util/request.cljs", :end-column 18, :method-params ([request context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request context])), :doc "Associate a context and path-info with the  request. The request URI must be\n  a subpath of the supplied context."}, in-context? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma-ssr/public/js/compiled/dev/macchiato/util/request.cljs", :line 77, :column 7, :end-line 77, :end-column 18, :arglists (quote ([request context])), :doc "Returns true if the URI of the request is a subpath of the supplied context.", :added "1.2"}, :added "1.2", :name macchiato.util.request/in-context?, :variadic false, :file "public/js/compiled/dev/macchiato/util/request.cljs", :end-column 18, :method-params ([request context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request context])), :doc "Returns true if the URI of the request is a subpath of the supplied context."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:default :coll :string :headers :keyword :nil :path-info :context :uri :query-string :hierarchy :body :scheme}, :order [:scheme :headers :uri :query-string :hierarchy :body :keyword :string :coll :nil :default :path-info :context]}, :doc "Functions for augmenting and pulling information from request maps."}