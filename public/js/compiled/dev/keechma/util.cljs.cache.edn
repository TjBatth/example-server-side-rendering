{:rename-macros {}, :renames {}, :externs {Error {}, window {requestAnimationFrame {}}}, :use-macros {}, :excludes #{}, :name keechma.util, :imports nil, :requires {cljs.core.async cljs.core.async}, :uses {close! cljs.core.async, chan cljs.core.async, put! cljs.core.async}, :defs {update-values {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/util.cljs", :line 4, :column 7, :end-line 4, :end-column 20, :arglists (quote ([m f & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(m f args)], :arglists ([m f & args]), :arglists-meta (nil)}}, :name keechma.util/update-values, :variadic true, :file "/Users/retro/Projects/keechma/keechma/src/keechma/util.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(m f args)], :arglists ([m f & args]), :arglists-meta (nil)}, :method-params [(m f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists ([m f & args])}, in? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/util.cljs", :line 7, :column 7, :end-line 7, :end-column 10, :arglists (quote ([seq elm])), :doc "true if seq contains elm"}, :name keechma.util/in?, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/util.cljs", :end-column 10, :method-params ([seq elm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([seq elm])), :doc "true if seq contains elm"}, without {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/util.cljs", :line 12, :column 7, :end-line 12, :end-column 14, :arglists (quote ([list val]))}, :name keechma.util/without, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/util.cljs", :end-column 14, :method-params ([list val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([list val]))}, animation-frame {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/util.cljs", :line 16, :column 7, :end-line 16, :end-column 22, :arglists (quote ([] [n] [n out])), :doc "Return a channel which will close on the nth next animation frame.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [n] [n out]), :arglists ([] [n] [n out]), :arglists-meta (nil nil nil)}}, :name keechma.util/animation-frame, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/util.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [n] [n out]), :arglists ([] [n] [n out]), :arglists-meta (nil nil nil)}, :method-params ([] [n] [n out]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists ([] [n] [n out]), :doc "Return a channel which will close on the nth next animation frame."}, dissoc-in {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/util.cljs", :line 30, :column 7, :end-line 30, :end-column 16, :arglists (quote ([m [k & ks :as keys]])), :doc "Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure."}, :name keechma.util/dissoc-in, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/util.cljs", :end-column 16, :method-params ([m p__27360]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m [k & ks :as keys]])), :doc "Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure."}}, :require-macros nil, :doc nil}