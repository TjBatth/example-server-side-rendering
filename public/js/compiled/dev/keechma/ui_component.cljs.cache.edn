{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {join clojure.string}, :excludes #{}, :name keechma.ui-component, :imports nil, :requires {cljs.core.async cljs.core.async, dep com.stuartsierra.dependency, com.stuartsierra.dependency com.stuartsierra.dependency, util keechma.util, keechma.util keechma.util, clojure.string clojure.string, set clojure.set, clojure.set clojure.set}, :uses {join clojure.string, put! cljs.core.async}, :defs {redirect {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 17, :column 4, :end-line 17, :end-column 12, :protocol keechma.ui-component/IUIComponent, :doc "Redirects page to the URL generated from params", :arglists (quote ([this params]))}, :protocol keechma.ui-component/IUIComponent, :name keechma.ui-component/redirect, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 12, :method-params ([this params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this params])), :doc "Redirects page to the URL generated from params"}, ->UIComponent {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 75, :column 12, :end-line 75, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([component-deps subscription-deps renderer]))}, :name keechma.ui-component/->UIComponent, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 23, :method-params ([component-deps subscription-deps renderer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 75, :end-line 75, :max-fixed-arity 3, :fn-var true, :arglists (quote ([component-deps subscription-deps renderer]))}, send-command {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 23, :column 4, :end-line 23, :end-column 16, :protocol keechma.ui-component/IUIComponent, :doc "Sends a command to the controller.", :arglists (quote ([this command] [this command args])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this command] [this command args]), :arglists ([this command] [this command args]), :arglists-meta (nil nil)}}, :protocol keechma.ui-component/IUIComponent, :name keechma.ui-component/send-command, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this command] [this command args]), :arglists ([this command] [this command args]), :arglists-meta (nil nil)}, :method-params ([this command] [this command args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists ([this command] [this command args]), :doc "Sends a command to the controller."}, assoc-name {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 159, :column 17, :end-line 159, :end-column 27, :private true, :arglists (quote ([components]))}, :private true, :name keechma.ui-component/assoc-name, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 27, :method-params ([components]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([components]))}, subscription {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 19, :column 4, :end-line 19, :end-column 16, :protocol keechma.ui-component/IUIComponent, :doc "Returns a subscription based on the key.", :arglists (quote ([this key] [this key args])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this key] [this key args]), :arglists ([this key] [this key args]), :arglists-meta (nil nil)}}, :protocol keechma.ui-component/IUIComponent, :name keechma.ui-component/subscription, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this key] [this key args]), :arglists ([this key] [this key args]), :arglists-meta (nil nil)}, :method-params ([this key] [this key args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 19, :max-fixed-arity 3, :fn-var true, :arglists ([this key] [this key args]), :doc "Returns a subscription based on the key."}, resolved-system {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 139, :column 17, :end-line 139, :end-column 32, :private true, :arglists (quote ([components sorted-keys]))}, :private true, :name keechma.ui-component/resolved-system, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 32, :method-params ([components sorted-keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([components sorted-keys]))}, report {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 16, :column 4, :end-line 16, :end-column 10, :protocol keechma.ui-component/IUIComponent, :doc nil, :arglists (quote ([this name payload] [this name payload severity])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([this name payload] [this name payload severity]), :arglists ([this name payload] [this name payload severity]), :arglists-meta (nil nil)}}, :protocol keechma.ui-component/IUIComponent, :name keechma.ui-component/report, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([this name payload] [this name payload severity]), :arglists ([this name payload] [this name payload severity]), :arglists-meta (nil nil)}, :method-params ([this name payload] [this name payload severity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 16, :max-fixed-arity 4, :fn-var true, :arglists ([this name payload] [this name payload severity]), :doc nil}, resolve-component-dep {:name keechma.ui-component/resolve-component-dep, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 135, :column 1, :end-line 135, :end-column 27, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 135, :column 6, :end-line 135, :end-column 27}, :doc "See [[resolve-dep]]", :tag any}, system {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 172, :column 7, :end-line 172, :end-column 13, :arglists (quote ([components] [components subscriptions])), :doc "Creates a component system.\n\n  Component system is a group of components that are interdependent. Each component\n  system must define a `:main` component which will be returned from the `system`\n  function.\n\n  `system` function resolves dependencies between components.\n\n  For example, let's say that your application consists of three components:\n\n  - layout\n  - sidebar\n  - chat room list\n\n  Layout is rendering the sidebar component and sidebar component is rendering the \n  chat room list component.\n\n  Chat room list component has a subscription dependency on `:chat-rooms` which will\n  return the list of chat rooms to render.\n\n  Usually you would either pass the chat rooms subscription from layout to sidebar to the\n  chat room list component, or the chat room list component would have a dependency\n  on a global `:chat-rooms` subscription.\n\n  Keechma allows you to avoid both of these problems:\n\n  - only the chat room list component will know about it's dependencies\n  - the dependencies will be injected from the outside by the `system` function \n\n  ```clojure\n  (defn layout-renderer [ctx] ;; ctx is `layout-component` record with resolved dependencies\n  [:div.main\n  [:div.sidebar [(component ctx :sidebar)]]]) ;; Resolve the `:sidebar` component\n\n  (def layout-component (constructor {:component-deps [:sidebar]\n  :renderer layout-renderer}))\n\n  (defn sidebar-renderer [ctx]\n  [:div.sidebar\n  [(component ctx :chat-room-list)]) ;; Resolve the `:chat-room-list` component\n\n  (def sidebar-component (constructor {:component-deps [:chat-room-list]\n  :renderer sidebar-renderer}))\n\n  (defn chat-room-list-renderer [ctx]\n  (let [chat-rooms (subscription ctx :chat-rooms)])) ;; Resolve the `:chat-rooms` subscription\n\n  (def chat-room-list-component (constructor {:subscription-deps [:chat-rooms]}))\n\n  (def main-component (system {:main layout-component ;; Map compnents to keys\n  :sidebar sidebar-component\n  :chat-room-list chat-room-list-component}\n  {:chat-rooms (fn [app-state-atom])})) ;; Map subscriptions to keys\n  ```\n  \n  In the example above `main-component` will be a Reagent component that can be mounted\n  into the DOM, with all of the dependencies between components resolved.\n\n  `system` function provided everything that components need from the outside, and all of the \n  components are reusable by design.\n  ", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([components] [components subscriptions]), :arglists ([components] [components subscriptions]), :arglists-meta (nil nil)}}, :name keechma.ui-component/system, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([components] [components subscriptions]), :arglists ([components] [components subscriptions]), :arglists-meta (nil nil)}, :method-params ([components] [components subscriptions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 2, :fn-var true, :arglists ([components] [components subscriptions]), :doc "Creates a component system.\n\n  Component system is a group of components that are interdependent. Each component\n  system must define a `:main` component which will be returned from the `system`\n  function.\n\n  `system` function resolves dependencies between components.\n\n  For example, let's say that your application consists of three components:\n\n  - layout\n  - sidebar\n  - chat room list\n\n  Layout is rendering the sidebar component and sidebar component is rendering the \n  chat room list component.\n\n  Chat room list component has a subscription dependency on `:chat-rooms` which will\n  return the list of chat rooms to render.\n\n  Usually you would either pass the chat rooms subscription from layout to sidebar to the\n  chat room list component, or the chat room list component would have a dependency\n  on a global `:chat-rooms` subscription.\n\n  Keechma allows you to avoid both of these problems:\n\n  - only the chat room list component will know about it's dependencies\n  - the dependencies will be injected from the outside by the `system` function \n\n  ```clojure\n  (defn layout-renderer [ctx] ;; ctx is `layout-component` record with resolved dependencies\n  [:div.main\n  [:div.sidebar [(component ctx :sidebar)]]]) ;; Resolve the `:sidebar` component\n\n  (def layout-component (constructor {:component-deps [:sidebar]\n  :renderer layout-renderer}))\n\n  (defn sidebar-renderer [ctx]\n  [:div.sidebar\n  [(component ctx :chat-room-list)]) ;; Resolve the `:chat-room-list` component\n\n  (def sidebar-component (constructor {:component-deps [:chat-room-list]\n  :renderer sidebar-renderer}))\n\n  (defn chat-room-list-renderer [ctx]\n  (let [chat-rooms (subscription ctx :chat-rooms)])) ;; Resolve the `:chat-rooms` subscription\n\n  (def chat-room-list-component (constructor {:subscription-deps [:chat-rooms]}))\n\n  (def main-component (system {:main layout-component ;; Map compnents to keys\n  :sidebar sidebar-component\n  :chat-room-list chat-room-list-component}\n  {:chat-rooms (fn [app-state-atom])})) ;; Map subscriptions to keys\n  ```\n  \n  In the example above `main-component` will be a Reagent component that can be mounted\n  into the DOM, with all of the dependencies between components resolved.\n\n  `system` function provided everything that components need from the outside, and all of the \n  components are reusable by design.\n  "}, IUIComponent {:meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 10, :column 14, :end-line 10, :end-column 26, :doc "IUIComponent protocol defines functions that can be called on\n  the UIComponent records.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {url [[this params]], report [[this name payload] [this name payload severity]], redirect [[this params]], subscription [[this key] [this key args]], component [[this key]], send-command [[this command] [this command args]], renderer [[this]], current-route [[this]]}}}, :protocol-symbol true, :name keechma.ui-component/IUIComponent, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 26, :column 1, :line 10, :protocol-info {:methods {url [[this params]], report [[this name payload] [this name payload severity]], redirect [[this params]], subscription [[this key] [this key args]], component [[this key]], send-command [[this command] [this command args]], renderer [[this]], current-route [[this]]}}, :info nil, :end-line 10, :tag any, :impls #{keechma.ui-component/UIComponent default}, :doc "IUIComponent protocol defines functions that can be called on\n  the UIComponent records.", :jsdoc ("@interface")}, resolve-component-subscriptions {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 146, :column 17, :end-line 146, :end-column 48, :private true, :arglists (quote ([component subscriptions]))}, :private true, :name keechma.ui-component/resolve-component-subscriptions, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 48, :method-params ([component subscriptions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component subscriptions]))}, component-dep-graph {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 78, :column 17, :end-line 78, :end-column 36, :private true, :arglists (quote ([components]))}, :private true, :name keechma.ui-component/component-dep-graph, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 36, :method-params ([components]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([components]))}, current-route {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 28, :column 4, :end-line 28, :end-column 17, :protocol keechma.ui-component/IUIComponent, :doc "Returns a current route data. It will use the `:current-route-fn` that is\n    injected from the outside to return the data.", :arglists (quote ([this]))}, :protocol keechma.ui-component/IUIComponent, :name keechma.ui-component/current-route, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns a current route data. It will use the `:current-route-fn` that is\n    injected from the outside to return the data."}, component-with-deps {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 94, :column 17, :end-line 94, :end-column 36, :private true, :arglists (quote ([component-key component system]))}, :private true, :name keechma.ui-component/component-with-deps, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 36, :method-params ([component-key component system]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 3, :fn-var true, :arglists (quote ([component-key component system]))}, resolve-dep {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 106, :column 7, :end-line 106, :end-column 18, :arglists (quote ([dep-kw coll-kw component key component-dep])), :doc "Resolves a dependency on the UIComponent record. Returns a new version\n  of the record with the resolved dependency.\n\n  ```clojure\n  (def news-component (constructor {:component-deps [:user-profile :similar-news]\n                                    :subscription-deps [:current-news :comments]}))\n\n  (resolve-dep :subscription-deps :subscriptions news-component :current-news (fn []...))\n  ;; Returns a new version of the `news-component` with the :current-news subscription resolved\n\n  (resolve-dep :component-deps :components news-component :user-profile user-profile-component))\n  ;; Returns a new version of the `news-component` with the :user-profile component resolved\n  ```\n\n  Two shorthand functions are defined that allow you to omit first two arguments:\n  \n  - `resolve-subscription-dep` - Resolves a subscription dependency\n  - `resolve-component-dep` - Resolves a component dependency\n  "}, :name keechma.ui-component/resolve-dep, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 18, :method-params ([dep-kw coll-kw component key component-dep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 5, :fn-var true, :arglists (quote ([dep-kw coll-kw component key component-dep])), :doc "Resolves a dependency on the UIComponent record. Returns a new version\n  of the record with the resolved dependency.\n\n  ```clojure\n  (def news-component (constructor {:component-deps [:user-profile :similar-news]\n                                    :subscription-deps [:current-news :comments]}))\n\n  (resolve-dep :subscription-deps :subscriptions news-component :current-news (fn []...))\n  ;; Returns a new version of the `news-component` with the :current-news subscription resolved\n\n  (resolve-dep :component-deps :components news-component :user-profile user-profile-component))\n  ;; Returns a new version of the `news-component` with the :user-profile component resolved\n  ```\n\n  Two shorthand functions are defined that allow you to omit first two arguments:\n  \n  - `resolve-subscription-dep` - Resolves a subscription dependency\n  - `resolve-component-dep` - Resolves a component dependency\n  "}, component->renderer {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 163, :column 17, :end-line 163, :end-column 36, :private true, :arglists (quote ([parent component]))}, :private true, :name keechma.ui-component/component->renderer, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 36, :method-params ([parent component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent component]))}, UIComponent {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable keechma.ui-component/IUIComponent cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name keechma.ui-component/UIComponent, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 75, :record true, :end-line 75, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, component {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 21, :column 4, :end-line 21, :end-column 13, :protocol keechma.ui-component/IUIComponent, :doc "Returns a component based on the key.", :arglists (quote ([this key]))}, :protocol keechma.ui-component/IUIComponent, :name keechma.ui-component/component, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 13, :method-params ([this key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this key])), :doc "Returns a component based on the key."}, renderer {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 25, :column 4, :end-line 25, :end-column 12, :protocol keechma.ui-component/IUIComponent, :doc "Returns a component renderer function that has the component record\n    partially applied (`ctx`) as the first argument.", :arglists (quote ([this]))}, :protocol keechma.ui-component/IUIComponent, :name keechma.ui-component/renderer, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns a component renderer function that has the component record\n    partially applied (`ctx`) as the first argument."}, resolve-subscription-dep {:name keechma.ui-component/resolve-subscription-dep, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 131, :column 1, :end-line 131, :end-column 30, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 131, :column 6, :end-line 131, :end-column 30}, :doc "See [[resolve-dep]].", :tag any}, map->UIComponent {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 75, :column 12, :end-line 75, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__27395]))}, :name keechma.ui-component/map->UIComponent, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 23, :method-params ([G__27395]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27395]))}, constructor {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 243, :column 7, :end-line 243, :end-column 18, :arglists (quote ([opts])), :doc "Createas a UIComponent record. Accepts `opts` as the argument. `opts` is\n  a map that can have the following params:\n\n  - `:component-deps` - Which child component is this component dependent on\n  - `:subscription-deps` - Which subscriptions is this component dependent on\n  - `:topic` - On which topic should this component send commands (to the controller)\n  - `:renderer` - A renderer function (Reagent component)\n\n  The UIComponent record is a way to list all the dependencies for a component. When\n  the application is started each component's renderer function will be partiall \n  applied with a verion of it's UIComponent that has the component and subscription\n  dependencies resolved.\n\n  This allows you to write components that are completely decoupled from the rest\n  of the application.\n\n  When you want to resolve injected component or subscription dependencies, you can\n  use the functions defined on the `UIComponent` protocol:\n\n  ```clojure\n  (def render [ctx] ;; `ctx` is a UIComponent with resolved dependencies\n    (let [child-component (component ctx :component-key)\n          subscription (subscription ctx :subscription-key)])\n\n  (def component (constructor {:renderer render\n                               :component-deps [:component-key]\n                               :subscription-deps [:subscription-key]))\n  ```\n  "}, :name keechma.ui-component/constructor, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 18, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :doc "Createas a UIComponent record. Accepts `opts` as the argument. `opts` is\n  a map that can have the following params:\n\n  - `:component-deps` - Which child component is this component dependent on\n  - `:subscription-deps` - Which subscriptions is this component dependent on\n  - `:topic` - On which topic should this component send commands (to the controller)\n  - `:renderer` - A renderer function (Reagent component)\n\n  The UIComponent record is a way to list all the dependencies for a component. When\n  the application is started each component's renderer function will be partiall \n  applied with a verion of it's UIComponent that has the component and subscription\n  dependencies resolved.\n\n  This allows you to write components that are completely decoupled from the rest\n  of the application.\n\n  When you want to resolve injected component or subscription dependencies, you can\n  use the functions defined on the `UIComponent` protocol:\n\n  ```clojure\n  (def render [ctx] ;; `ctx` is a UIComponent with resolved dependencies\n    (let [child-component (component ctx :component-key)\n          subscription (subscription ctx :subscription-key)])\n\n  (def component (constructor {:renderer render\n                               :component-deps [:component-key]\n                               :subscription-deps [:subscription-key]))\n  ```\n  "}, resolve-subscriptions {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 154, :column 17, :end-line 154, :end-column 38, :private true, :arglists (quote ([components subscriptions]))}, :private true, :name keechma.ui-component/resolve-subscriptions, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 38, :method-params ([components subscriptions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists (quote ([components subscriptions]))}, url {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 13, :column 4, :end-line 13, :end-column 7, :protocol keechma.ui-component/IUIComponent, :doc "Returns a URL based on the params. It will use the `:url-fn` that is injected\n    from the outside to generate the URL based on the current app routes.", :arglists (quote ([this params]))}, :protocol keechma.ui-component/IUIComponent, :name keechma.ui-component/url, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 7, :method-params ([this params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this params])), :doc "Returns a URL based on the params. It will use the `:url-fn` that is injected\n    from the outside to generate the URL based on the current app routes."}, missing-component-deps {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :line 87, :column 17, :end-line 87, :end-column 39, :private true, :arglists (quote ([components]))}, :private true, :name keechma.ui-component/missing-component-deps, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/ui_component.cljs", :end-column 39, :method-params ([components]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([components]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:subscription-deps component-deps subscription-deps :name :url-fn :topic :commands-chan :renderer :subscriptions :components :reporter :ui :info :current-route-fn renderer :h1 :main :redirect-fn :app-db :component-deps}, :order [:url-fn :info :reporter :name :topic :redirect-fn :current-route-fn :subscriptions :components :commands-chan :app-db :renderer :component-deps :subscription-deps component-deps subscription-deps renderer :main :ui :h1]}, :doc nil}