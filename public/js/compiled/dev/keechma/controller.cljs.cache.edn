{:rename-macros {}, :renames {}, :externs {Error {}, Object {}}, :use-macros {go cljs.core.async.macros}, :excludes #{}, :name keechma.controller, :imports nil, :requires {cljs.core.async cljs.core.async}, :uses {put! cljs.core.async}, :defs {redirect {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 98, :column 4, :end-line 98, :end-column 12, :protocol keechma.controller/IController, :doc "Redirects the page to the URL based on the params.", :arglists (quote ([this params]))}, :protocol keechma.controller/IController, :name keechma.controller/redirect, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 12, :method-params ([this params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this params])), :doc "Redirects the page to the URL based on the params."}, not-implemented {:name keechma.controller/not-implemented, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 5, :column 1, :end-line 5, :end-column 21, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 5, :column 6, :end-line 5, :end-column 21}, :tag cljs.core/Keyword}, send-command {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 92, :column 4, :end-line 92, :end-column 16, :protocol keechma.controller/IController, :doc "Sends a command to another controller", :arglists (quote ([this command-name] [this command-name args])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this command-name] [this command-name args]), :arglists ([this command-name] [this command-name args]), :arglists-meta (nil nil)}}, :protocol keechma.controller/IController, :name keechma.controller/send-command, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this command-name] [this command-name args]), :arglists ([this command-name] [this command-name args]), :arglists-meta (nil nil)}, :method-params ([this command-name] [this command-name args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 92, :max-fixed-arity 3, :fn-var true, :arglists ([this command-name] [this command-name args]), :doc "Sends a command to another controller"}, handler {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 83, :column 4, :end-line 83, :end-column 11, :protocol keechma.controller/IController, :doc "Called after the `start` function. You can listen to the commands on the `in-chan` \n    inside the `go` block. This is the function in which you implement anything that reacts\n    to the user commands (coming from the UI).", :arglists (quote ([this app-db-atom in-chan out-chan]))}, :protocol keechma.controller/IController, :name keechma.controller/handler, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 11, :method-params ([this app-db-atom in-chan out-chan]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 83, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this app-db-atom in-chan out-chan])), :doc "Called after the `start` function. You can listen to the commands on the `in-chan` \n    inside the `go` block. This is the function in which you implement anything that reacts\n    to the user commands (coming from the UI)."}, IController {:meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 7, :column 14, :end-line 7, :end-column 25, :doc "Controllers in Keechma are the place where you put the code\n  that has side-effects. They are managed by the [[keechma.controller-manager]]\n  which will start them or stop them based on the current route.\n\n  Each controller implements the `params` function. `params` function returns\n  a subset of the route params that are the controller is interested in.\n\n  For instance let's say that you have a `UserController` which should be\n  running only when the user is on the route `/users`:\n\n  ```clojure\n  ;; let's say that your routes are defined like this:\n  \n  (def routes [\":page\"]) ;; Routes are managed by the app-state library.\n\n  ;; When user goes to the url `/users` the params function would receive\n  ;; something that looks like this:\n\n  {:data {:page \"users\"}}\n\n  ;; `params` function returns `true` only when user is on the `:page` \"users\"\n  (defrecord UserController []\n    IController\n    (params [_ route-params]\n      (when (= \"users\" (get-in route-params [:data :page]))\n       true)))\n  ```\n\n  When `params` function returns a non `nil` value the controller will be started:\n\n  1. Controller's `start` function will be synchronously called with the current\n  application state. This function returns a new version of the state if needed.\n  (if the `start` function is not doing any changes to the app-state it must return\n  the received version)\n  2. Controller's `handler` function will be called - this function will receive\n  application state atom, channel through which the controller receives the commands\n  (`in-chan`) and the channel through which the controller can send commends to\n  other controllers (`out-chan`).\n\n  When `params` function returns a `nil` value that instance of the controller will\n  be stopped:\n\n  1. Controller's `stop` function will be synchronously called with the current\n  application state. This function returns a new version of the state if needed - \n  use this function to clean up any data loaded by the controller (if the `stop` \n  function is not doing any changes to the app-state it must return the received\n  version).\n  2. Controller's `in-chan` (through which it can receive commands) will be closed.\n\n  Controller's `start` and `stop` functions can asynchronuously send commends to the\n  controller. Calling `(execute controller-instance :command)` will put that command\n  on the controller's `in-chan`. Controller can react to these commands from the \n  `handler` function. \n\n  ", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {redirect [[this params]], send-command [[this command-name] [this command-name args]], handler [[this app-db-atom in-chan out-chan]], wake [[this params app-db]], report [[this direction name payload] [this direction name payload severity]], params [[this route-params]], start [[this params app-db]], execute [[this command-name] [this command-name args]], ssr-handler [[this app-db-atom done in-chan out-chan]], stop [[this params app-db]], context [[this] [this key]], is-running? [[this]]}}}, :protocol-symbol true, :name keechma.controller/IController, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 25, :column 1, :line 7, :protocol-info {:methods {redirect [[this params]], send-command [[this command-name] [this command-name args]], handler [[this app-db-atom in-chan out-chan]], wake [[this params app-db]], report [[this direction name payload] [this direction name payload severity]], params [[this route-params]], start [[this params app-db]], execute [[this command-name] [this command-name args]], ssr-handler [[this app-db-atom done in-chan out-chan]], stop [[this params app-db]], context [[this] [this key]], is-running? [[this]]}}, :info nil, :end-line 7, :tag any, :impls #{default}, :doc "Controllers in Keechma are the place where you put the code\n  that has side-effects. They are managed by the [[keechma.controller-manager]]\n  which will start them or stop them based on the current route.\n\n  Each controller implements the `params` function. `params` function returns\n  a subset of the route params that are the controller is interested in.\n\n  For instance let's say that you have a `UserController` which should be\n  running only when the user is on the route `/users`:\n\n  ```clojure\n  ;; let's say that your routes are defined like this:\n  \n  (def routes [\":page\"]) ;; Routes are managed by the app-state library.\n\n  ;; When user goes to the url `/users` the params function would receive\n  ;; something that looks like this:\n\n  {:data {:page \"users\"}}\n\n  ;; `params` function returns `true` only when user is on the `:page` \"users\"\n  (defrecord UserController []\n    IController\n    (params [_ route-params]\n      (when (= \"users\" (get-in route-params [:data :page]))\n       true)))\n  ```\n\n  When `params` function returns a non `nil` value the controller will be started:\n\n  1. Controller's `start` function will be synchronously called with the current\n  application state. This function returns a new version of the state if needed.\n  (if the `start` function is not doing any changes to the app-state it must return\n  the received version)\n  2. Controller's `handler` function will be called - this function will receive\n  application state atom, channel through which the controller receives the commands\n  (`in-chan`) and the channel through which the controller can send commends to\n  other controllers (`out-chan`).\n\n  When `params` function returns a `nil` value that instance of the controller will\n  be stopped:\n\n  1. Controller's `stop` function will be synchronously called with the current\n  application state. This function returns a new version of the state if needed - \n  use this function to clean up any data loaded by the controller (if the `stop` \n  function is not doing any changes to the app-state it must return the received\n  version).\n  2. Controller's `in-chan` (through which it can receive commands) will be closed.\n\n  Controller's `start` and `stop` functions can asynchronuously send commends to the\n  controller. Calling `(execute controller-instance :command)` will put that command\n  on the controller's `in-chan`. Controller can react to these commands from the \n  `handler` function. \n\n  ", :jsdoc ("@interface")}, wake {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 71, :column 4, :end-line 71, :end-column 8, :protocol keechma.controller/IController, :doc "Called when the controller is started from the saved state stored on the server. It will be\n     called instead of the `start` function if the `ssr-handler` function is implemented. This\n     allows you to manually revive the serialized data if needed. Usually this function is not\n     needed, but if you for instance start the inner application from the controller, you can\n     use this function to wake the inner app.", :arglists (quote ([this params app-db]))}, :protocol keechma.controller/IController, :name keechma.controller/wake, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 8, :method-params ([this params app-db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 71, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this params app-db])), :doc "Called when the controller is started from the saved state stored on the server. It will be\n     called instead of the `start` function if the `ssr-handler` function is implemented. This\n     allows you to manually revive the serialized data if needed. Usually this function is not\n     needed, but if you for instance start the inner application from the controller, you can\n     use this function to wake the inner app."}, report {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 65, :column 4, :end-line 65, :end-column 10, :protocol keechma.controller/IController, :doc nil, :arglists (quote ([this direction name payload] [this direction name payload severity])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([this direction name payload] [this direction name payload severity]), :arglists ([this direction name payload] [this direction name payload severity]), :arglists-meta (nil nil)}}, :protocol keechma.controller/IController, :name keechma.controller/report, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([this direction name payload] [this direction name payload severity]), :arglists ([this direction name payload] [this direction name payload severity]), :arglists-meta (nil nil)}, :method-params ([this direction name payload] [this direction name payload severity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 65, :max-fixed-arity 5, :fn-var true, :arglists ([this direction name payload] [this direction name payload severity]), :doc nil}, params {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 63, :column 4, :end-line 63, :end-column 10, :protocol keechma.controller/IController, :doc "Receives the `route-params` and returns either the `params` for the controller or `nil`", :arglists (quote ([this route-params]))}, :protocol keechma.controller/IController, :name keechma.controller/params, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 10, :method-params ([this route-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this route-params])), :doc "Receives the `route-params` and returns either the `params` for the controller or `nil`"}, start {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 68, :column 4, :end-line 68, :end-column 9, :protocol keechma.controller/IController, :doc "Called when the controller is started. Receives the controller `params` (returned by the\n    `params` function) and the application state. It must return the application state.", :arglists (quote ([this params app-db]))}, :protocol keechma.controller/IController, :name keechma.controller/start, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 9, :method-params ([this params app-db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 68, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this params app-db])), :doc "Called when the controller is started. Receives the controller `params` (returned by the\n    `params` function) and the application state. It must return the application state."}, dispatcher {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 140, :column 7, :end-line 140, :end-column 17, :arglists (quote ([app-db-atom in-chan actions])), :doc "Helper function to dispatch commands from the `handler` function.\n\n  Most of the time, handler function will just dispatch the commands\n  to other functions. This functions provides a shortcut for that case.\n\n  ```clojure\n  (defrecord Controller []\n    IController\n    (handler [_ app-db-atom in-chan _]\n      (dispatcher app-db-atom in-chan {:command-name some-fn})))\n  ```"}, :name keechma.controller/dispatcher, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 17, :method-params ([app-db-atom in-chan actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 3, :fn-var true, :arglists (quote ([app-db-atom in-chan actions])), :doc "Helper function to dispatch commands from the `handler` function.\n\n  Most of the time, handler function will just dispatch the commands\n  to other functions. This functions provides a shortcut for that case.\n\n  ```clojure\n  (defrecord Controller []\n    IController\n    (handler [_ app-db-atom in-chan _]\n      (dispatcher app-db-atom in-chan {:command-name some-fn})))\n  ```"}, execute {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 80, :column 4, :end-line 80, :end-column 11, :protocol keechma.controller/IController, :doc "Puts the command on the controller's `in-chan` which is passed as an argument to the \n    `handler` function. Can be called from the `start` and `stop` functions.", :arglists (quote ([this command-name] [this command-name args])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this command-name] [this command-name args]), :arglists ([this command-name] [this command-name args]), :arglists-meta (nil nil)}}, :protocol keechma.controller/IController, :name keechma.controller/execute, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this command-name] [this command-name args]), :arglists ([this command-name] [this command-name args]), :arglists-meta (nil nil)}, :method-params ([this command-name] [this command-name args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 80, :max-fixed-arity 3, :fn-var true, :arglists ([this command-name] [this command-name args]), :doc "Puts the command on the controller's `in-chan` which is passed as an argument to the \n    `handler` function. Can be called from the `start` and `stop` functions."}, ssr-handler {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 87, :column 4, :end-line 87, :end-column 15, :protocol keechma.controller/IController, :doc "Called in after the `start` (instead of the `handler` function) function in the server\n     side context. This function should call the `done` callback when it has completed the \n     server side data loading. Returning `::not-implemented` which is a default behavior will\n     mark the controller as non server side.", :arglists (quote ([this app-db-atom done in-chan out-chan]))}, :protocol keechma.controller/IController, :name keechma.controller/ssr-handler, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 15, :method-params ([this app-db-atom done in-chan out-chan]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 87, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this app-db-atom done in-chan out-chan])), :doc "Called in after the `start` (instead of the `handler` function) function in the server\n     side context. This function should call the `done` callback when it has completed the \n     server side data loading. Returning `::not-implemented` which is a default behavior will\n     mark the controller as non server side."}, stop {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 77, :column 4, :end-line 77, :end-column 8, :protocol keechma.controller/IController, :doc "Called when the controller is stopped. Receives the controller `params` (returned by the\n    `params` function) and the application state. It must return the application state.", :arglists (quote ([this params app-db]))}, :protocol keechma.controller/IController, :name keechma.controller/stop, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 8, :method-params ([this params app-db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 77, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this params app-db])), :doc "Called when the controller is stopped. Receives the controller `params` (returned by the\n    `params` function) and the application state. It must return the application state."}, context {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 66, :column 4, :end-line 66, :end-column 11, :protocol keechma.controller/IController, :doc "Return the context passed to application.", :arglists (quote ([this] [this key])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([this] [this key]), :arglists ([this] [this key]), :arglists-meta (nil nil)}}, :protocol keechma.controller/IController, :name keechma.controller/context, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([this] [this key]), :arglists ([this] [this key]), :arglists-meta (nil nil)}, :method-params ([this] [this key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists ([this] [this key]), :doc "Return the context passed to application."}, map->SerializedController {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 159, :column 12, :end-line 159, :end-column 32, :internal-ctor true, :factory :map, :arglists (quote ([G__27810]))}, :name keechma.controller/map->SerializedController, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 32, :method-params ([G__27810]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27810]))}, is-running? {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 94, :column 4, :end-line 94, :end-column 15, :protocol keechma.controller/IController, :doc "Returns `true` if this controller is still running. You can use this if you have some\n    kind of async action, and you want to make sure that the controller is still running \n    when you receive the results.", :arglists (quote ([this]))}, :protocol keechma.controller/IController, :name keechma.controller/is-running?, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns `true` if this controller is still running. You can use this if you have some\n    kind of async action, and you want to make sure that the controller is still running \n    when you receive the results."}, SerializedController {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name keechma.controller/SerializedController, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 32, :type true, :column 12, :internal-ctor true, :line 159, :record true, :end-line 159, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->SerializedController {:protocol-inline nil, :meta {:file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :line 159, :column 12, :end-line 159, :end-column 32, :internal-ctor true, :factory :positional, :arglists (quote ([params]))}, :name keechma.controller/->SerializedController, :variadic false, :file "/Users/retro/Projects/keechma/keechma/src/keechma/controller.cljs", :end-column 32, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:controller :else :name :out-chan :params :recur :running params :reporter :out :info :context :keechma.controller/not-implemented :in-chan :redirect-fn :in}, :order [:keechma.controller/not-implemented :context :info :reporter :name :controller :in :in-chan :out-chan :out :running :redirect-fn :recur :else :params params]}, :doc nil}